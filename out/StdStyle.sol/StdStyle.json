{"abi":[],"bytecode":{"object":"0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212203a1266c289430ab5458d72f1432a536806c0c247fceca1cc8258a2e00f54517664736f6c634300081c0033","sourceMap":"100:10361:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212203a1266c289430ab5458d72f1432a536806c0c247fceca1cc8258a2e00f54517664736f6c634300081c0033","sourceMap":"100:10361:8:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/forge-std/src/StdStyle.sol\":\"StdStyle\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/forge-std/src/StdStyle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport {VmSafe} from \\\"./Vm.sol\\\";\\n\\nlibrary StdStyle {\\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))));\\n\\n    string constant RED = \\\"\\\\u001b[91m\\\";\\n    string constant GREEN = \\\"\\\\u001b[92m\\\";\\n    string constant YELLOW = \\\"\\\\u001b[93m\\\";\\n    string constant BLUE = \\\"\\\\u001b[94m\\\";\\n    string constant MAGENTA = \\\"\\\\u001b[95m\\\";\\n    string constant CYAN = \\\"\\\\u001b[96m\\\";\\n    string constant BOLD = \\\"\\\\u001b[1m\\\";\\n    string constant DIM = \\\"\\\\u001b[2m\\\";\\n    string constant ITALIC = \\\"\\\\u001b[3m\\\";\\n    string constant UNDERLINE = \\\"\\\\u001b[4m\\\";\\n    string constant INVERSE = \\\"\\\\u001b[7m\\\";\\n    string constant RESET = \\\"\\\\u001b[0m\\\";\\n\\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\\n        return string(abi.encodePacked(style, self, RESET));\\n    }\\n\\n    function red(string memory self) internal pure returns (string memory) {\\n        return styleConcat(RED, self);\\n    }\\n\\n    function red(uint256 self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function red(int256 self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function red(address self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function red(bool self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function redBytes(bytes memory self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\\n        return red(vm.toString(self));\\n    }\\n\\n    function green(string memory self) internal pure returns (string memory) {\\n        return styleConcat(GREEN, self);\\n    }\\n\\n    function green(uint256 self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function green(int256 self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function green(address self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function green(bool self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\\n        return green(vm.toString(self));\\n    }\\n\\n    function yellow(string memory self) internal pure returns (string memory) {\\n        return styleConcat(YELLOW, self);\\n    }\\n\\n    function yellow(uint256 self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellow(int256 self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellow(address self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellow(bool self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\\n        return yellow(vm.toString(self));\\n    }\\n\\n    function blue(string memory self) internal pure returns (string memory) {\\n        return styleConcat(BLUE, self);\\n    }\\n\\n    function blue(uint256 self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blue(int256 self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blue(address self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blue(bool self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\\n        return blue(vm.toString(self));\\n    }\\n\\n    function magenta(string memory self) internal pure returns (string memory) {\\n        return styleConcat(MAGENTA, self);\\n    }\\n\\n    function magenta(uint256 self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magenta(int256 self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magenta(address self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magenta(bool self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\\n        return magenta(vm.toString(self));\\n    }\\n\\n    function cyan(string memory self) internal pure returns (string memory) {\\n        return styleConcat(CYAN, self);\\n    }\\n\\n    function cyan(uint256 self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyan(int256 self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyan(address self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyan(bool self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\\n        return cyan(vm.toString(self));\\n    }\\n\\n    function bold(string memory self) internal pure returns (string memory) {\\n        return styleConcat(BOLD, self);\\n    }\\n\\n    function bold(uint256 self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function bold(int256 self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function bold(address self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function bold(bool self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\\n        return bold(vm.toString(self));\\n    }\\n\\n    function dim(string memory self) internal pure returns (string memory) {\\n        return styleConcat(DIM, self);\\n    }\\n\\n    function dim(uint256 self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dim(int256 self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dim(address self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dim(bool self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\\n        return dim(vm.toString(self));\\n    }\\n\\n    function italic(string memory self) internal pure returns (string memory) {\\n        return styleConcat(ITALIC, self);\\n    }\\n\\n    function italic(uint256 self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italic(int256 self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italic(address self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italic(bool self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\\n        return italic(vm.toString(self));\\n    }\\n\\n    function underline(string memory self) internal pure returns (string memory) {\\n        return styleConcat(UNDERLINE, self);\\n    }\\n\\n    function underline(uint256 self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underline(int256 self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underline(address self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underline(bool self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\\n        return underline(vm.toString(self));\\n    }\\n\\n    function inverse(string memory self) internal pure returns (string memory) {\\n        return styleConcat(INVERSE, self);\\n    }\\n\\n    function inverse(uint256 self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverse(int256 self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverse(address self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverse(bool self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n\\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\\n        return inverse(vm.toString(self));\\n    }\\n}\\n\",\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\"},\"lib/forge-std/src/Vm.sol\":{\"content\":\"// Automatically @generated by scripts/vm.py. Do not modify manually.\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.2 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\\n/// these cheats in scripts.\\ninterface VmSafe {\\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\\n    enum CallerMode {\\n        // No caller modification is currently active.\\n        None,\\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\\n        Broadcast,\\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\\n        RecurrentBroadcast,\\n        // A one time prank triggered by a `vm.prank()` call is currently active.\\n        Prank,\\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\\n        RecurrentPrank\\n    }\\n\\n    /// The kind of account access that occurred.\\n    enum AccountAccessKind {\\n        // The account was called.\\n        Call,\\n        // The account was called via delegatecall.\\n        DelegateCall,\\n        // The account was called via callcode.\\n        CallCode,\\n        // The account was called via staticcall.\\n        StaticCall,\\n        // The account was created.\\n        Create,\\n        // The account was selfdestructed.\\n        SelfDestruct,\\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\\n        Resume,\\n        // The account's balance was read.\\n        Balance,\\n        // The account's codesize was read.\\n        Extcodesize,\\n        // The account's codehash was read.\\n        Extcodehash,\\n        // The account's code was copied.\\n        Extcodecopy\\n    }\\n\\n    /// Forge execution contexts.\\n    enum ForgeContext {\\n        // Test group execution context (test, coverage or snapshot).\\n        TestGroup,\\n        // `forge test` execution context.\\n        Test,\\n        // `forge coverage` execution context.\\n        Coverage,\\n        // `forge snapshot` execution context.\\n        Snapshot,\\n        // Script group execution context (dry run, broadcast or resume).\\n        ScriptGroup,\\n        // `forge script` execution context.\\n        ScriptDryRun,\\n        // `forge script --broadcast` execution context.\\n        ScriptBroadcast,\\n        // `forge script --resume` execution context.\\n        ScriptResume,\\n        // Unknown `forge` execution context.\\n        Unknown\\n    }\\n\\n    /// The transaction type (`txType`) of the broadcast.\\n    enum BroadcastTxType {\\n        // Represents a CALL broadcast tx.\\n        Call,\\n        // Represents a CREATE broadcast tx.\\n        Create,\\n        // Represents a CREATE2 broadcast tx.\\n        Create2\\n    }\\n\\n    /// An Ethereum log. Returned by `getRecordedLogs`.\\n    struct Log {\\n        // The topics of the log, including the signature, if any.\\n        bytes32[] topics;\\n        // The raw data of the log.\\n        bytes data;\\n        // The address of the log's emitter.\\n        address emitter;\\n    }\\n\\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\\n    struct Rpc {\\n        // The alias of the RPC URL.\\n        string key;\\n        // The RPC URL.\\n        string url;\\n    }\\n\\n    /// An RPC log object. Returned by `eth_getLogs`.\\n    struct EthGetLogs {\\n        // The address of the log's emitter.\\n        address emitter;\\n        // The topics of the log, including the signature, if any.\\n        bytes32[] topics;\\n        // The raw data of the log.\\n        bytes data;\\n        // The block hash.\\n        bytes32 blockHash;\\n        // The block number.\\n        uint64 blockNumber;\\n        // The transaction hash.\\n        bytes32 transactionHash;\\n        // The transaction index in the block.\\n        uint64 transactionIndex;\\n        // The log index.\\n        uint256 logIndex;\\n        // Whether the log was removed.\\n        bool removed;\\n    }\\n\\n    /// A single entry in a directory listing. Returned by `readDir`.\\n    struct DirEntry {\\n        // The error message, if any.\\n        string errorMessage;\\n        // The path of the entry.\\n        string path;\\n        // The depth of the entry.\\n        uint64 depth;\\n        // Whether the entry is a directory.\\n        bool isDir;\\n        // Whether the entry is a symlink.\\n        bool isSymlink;\\n    }\\n\\n    /// Metadata information about a file.\\n    /// This structure is returned from the `fsMetadata` function and represents known\\n    /// metadata about a file such as its permissions, size, modification\\n    /// times, etc.\\n    struct FsMetadata {\\n        // True if this metadata is for a directory.\\n        bool isDir;\\n        // True if this metadata is for a symlink.\\n        bool isSymlink;\\n        // The size of the file, in bytes, this metadata is for.\\n        uint256 length;\\n        // True if this metadata is for a readonly (unwritable) file.\\n        bool readOnly;\\n        // The last modification time listed in this metadata.\\n        uint256 modified;\\n        // The last access time of this metadata.\\n        uint256 accessed;\\n        // The creation time listed in this metadata.\\n        uint256 created;\\n    }\\n\\n    /// A wallet with a public and private key.\\n    struct Wallet {\\n        // The wallet's address.\\n        address addr;\\n        // The wallet's public key `X`.\\n        uint256 publicKeyX;\\n        // The wallet's public key `Y`.\\n        uint256 publicKeyY;\\n        // The wallet's private key.\\n        uint256 privateKey;\\n    }\\n\\n    /// The result of a `tryFfi` call.\\n    struct FfiResult {\\n        // The exit code of the call.\\n        int32 exitCode;\\n        // The optionally hex-decoded `stdout` data.\\n        bytes stdout;\\n        // The `stderr` data.\\n        bytes stderr;\\n    }\\n\\n    /// Information on the chain and fork.\\n    struct ChainInfo {\\n        // The fork identifier. Set to zero if no fork is active.\\n        uint256 forkId;\\n        // The chain ID of the current fork.\\n        uint256 chainId;\\n    }\\n\\n    /// Information about a blockchain.\\n    struct Chain {\\n        // The chain name.\\n        string name;\\n        // The chain's Chain ID.\\n        uint256 chainId;\\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\\n        string chainAlias;\\n        // A default RPC endpoint for this chain.\\n        string rpcUrl;\\n    }\\n\\n    /// The result of a `stopAndReturnStateDiff` call.\\n    struct AccountAccess {\\n        // The chain and fork the access occurred.\\n        ChainInfo chainInfo;\\n        // The kind of account access that determines what the account is.\\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\\n        // If kind is Create, then the account is the newly created account.\\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\\n        // If kind is a Resume, then account represents a account context that has resumed.\\n        AccountAccessKind kind;\\n        // The account that was accessed.\\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\\n        address account;\\n        // What accessed the account.\\n        address accessor;\\n        // If the account was initialized or empty prior to the access.\\n        // An account is considered initialized if it has code, a\\n        // non-zero nonce, or a non-zero balance.\\n        bool initialized;\\n        // The previous balance of the accessed account.\\n        uint256 oldBalance;\\n        // The potential new balance of the accessed account.\\n        // That is, all balance changes are recorded here, even if reverts occurred.\\n        uint256 newBalance;\\n        // Code of the account deployed by CREATE.\\n        bytes deployedCode;\\n        // Value passed along with the account access\\n        uint256 value;\\n        // Input data provided to the CREATE or CALL\\n        bytes data;\\n        // If this access reverted in either the current or parent context.\\n        bool reverted;\\n        // An ordered list of storage accesses made during an account access operation.\\n        StorageAccess[] storageAccesses;\\n        // Call depth traversed during the recording of state differences\\n        uint64 depth;\\n    }\\n\\n    /// The storage accessed during an `AccountAccess`.\\n    struct StorageAccess {\\n        // The account whose storage was accessed.\\n        address account;\\n        // The slot that was accessed.\\n        bytes32 slot;\\n        // If the access was a write.\\n        bool isWrite;\\n        // The previous value of the slot.\\n        bytes32 previousValue;\\n        // The new value of the slot.\\n        bytes32 newValue;\\n        // If the access was reverted.\\n        bool reverted;\\n    }\\n\\n    /// Gas used. Returned by `lastCallGas`.\\n    struct Gas {\\n        // The gas limit of the call.\\n        uint64 gasLimit;\\n        // The total gas used.\\n        uint64 gasTotalUsed;\\n        // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>\\n        uint64 gasMemoryUsed;\\n        // The amount of gas refunded.\\n        int64 gasRefunded;\\n        // The amount of gas remaining.\\n        uint64 gasRemaining;\\n    }\\n\\n    /// The result of the `stopDebugTraceRecording` call\\n    struct DebugStep {\\n        // The stack before executing the step of the run.\\n        // stack\\\\[0\\\\] represents the top of the stack.\\n        // and only stack data relevant to the opcode execution is contained.\\n        uint256[] stack;\\n        // The memory input data before executing the step of the run.\\n        // only input data relevant to the opcode execution is contained.\\n        // e.g. for MLOAD, it will have memory\\\\[offset:offset+32\\\\] copied here.\\n        // the offset value can be get by the stack data.\\n        bytes memoryInput;\\n        // The opcode that was accessed.\\n        uint8 opcode;\\n        // The call depth of the step.\\n        uint64 depth;\\n        // Whether the call end up with out of gas error.\\n        bool isOutOfGas;\\n        // The contract address where the opcode is running\\n        address contractAddr;\\n    }\\n\\n    /// Represents a transaction's broadcast details.\\n    struct BroadcastTxSummary {\\n        // The hash of the transaction that was broadcasted\\n        bytes32 txHash;\\n        // Represent the type of transaction among CALL, CREATE, CREATE2\\n        BroadcastTxType txType;\\n        // The address of the contract that was called or created.\\n        // This is address of the contract that is created if the txType is CREATE or CREATE2.\\n        address contractAddress;\\n        // The block number the transaction landed in.\\n        uint64 blockNumber;\\n        // Status of the transaction, retrieved from the transaction receipt.\\n        bool success;\\n    }\\n\\n    /// Holds a signed EIP-7702 authorization for an authority account to delegate to an implementation.\\n    struct SignedDelegation {\\n        // The y-parity of the recovered secp256k1 signature (0 or 1).\\n        uint8 v;\\n        // First 32 bytes of the signature.\\n        bytes32 r;\\n        // Second 32 bytes of the signature.\\n        bytes32 s;\\n        // The current nonce of the authority account at signing time.\\n        // Used to ensure signature can't be replayed after account nonce changes.\\n        uint64 nonce;\\n        // Address of the contract implementation that will be delegated to.\\n        // Gets encoded into delegation code: 0xef0100 || implementation.\\n        address implementation;\\n    }\\n\\n    /// Represents a \\\"potential\\\" revert reason from a single subsequent call when using `vm.assumeNoReverts`.\\n    /// Reverts that match will result in a FOUNDRY::ASSUME rejection, whereas unmatched reverts will be surfaced\\n    /// as normal.\\n    struct PotentialRevert {\\n        // The allowed origin of the revert opcode; address(0) allows reverts from any address\\n        address reverter;\\n        // When true, only matches on the beginning of the revert data, otherwise, matches on entire revert data\\n        bool partialMatch;\\n        // The data to use to match encountered reverts\\n        bytes revertData;\\n    }\\n\\n    /// An EIP-2930 access list item.\\n    struct AccessListItem {\\n        // The address to be added in access list.\\n        address target;\\n        // The storage keys to be added in access list.\\n        bytes32[] storageKeys;\\n    }\\n\\n    // ======== Crypto ========\\n\\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\\n\\n    /// Generates a wallet from the private key and returns the wallet.\\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\\n\\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\\n\\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\\n\\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\\n    /// at `{derivationPath}{index}`.\\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\\n        external\\n        pure\\n        returns (uint256 privateKey);\\n\\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\\n        external\\n        pure\\n        returns (uint256 privateKey);\\n\\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\\n    /// at `{derivationPath}{index}`.\\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\\n        external\\n        pure\\n        returns (uint256 privateKey);\\n\\n    /// Derives secp256r1 public key from the provided `privateKey`.\\n    function publicKeyP256(uint256 privateKey) external pure returns (uint256 publicKeyX, uint256 publicKeyY);\\n\\n    /// Adds a private key to the local forge wallet and returns the address.\\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\\n\\n    /// Derive a set number of wallets from a mnemonic at the derivation path `m/44'/60'/0'/0/{0..count}`.\\n    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.\\n    function rememberKeys(string calldata mnemonic, string calldata derivationPath, uint32 count)\\n        external\\n        returns (address[] memory keyAddrs);\\n\\n    /// Derive a set number of wallets from a mnemonic in the specified language at the derivation path `m/44'/60'/0'/0/{0..count}`.\\n    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.\\n    function rememberKeys(\\n        string calldata mnemonic,\\n        string calldata derivationPath,\\n        string calldata language,\\n        uint32 count\\n    ) external returns (address[] memory keyAddrs);\\n\\n    /// Signs data with a `Wallet`.\\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\\n    /// This format reduces the signature size from 65 to 64 bytes.\\n    function signCompact(Wallet calldata wallet, bytes32 digest) external returns (bytes32 r, bytes32 vs);\\n\\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\\n    /// This format reduces the signature size from 65 to 64 bytes.\\n    function signCompact(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\\n\\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\\n    /// This format reduces the signature size from 65 to 64 bytes.\\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\\n    /// if exactly one signer is provided to the script, that signer is used.\\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\\n    function signCompact(bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\\n\\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\\n    /// This format reduces the signature size from 65 to 64 bytes.\\n    /// Raises error if none of the signers passed into the script have provided address.\\n    function signCompact(address signer, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\\n\\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\\n    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);\\n\\n    /// Signs data with a `Wallet`.\\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\\n\\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\\n\\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\\n    /// if exactly one signer is provided to the script, that signer is used.\\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\\n    function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\\n\\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\\n    /// Raises error if none of the signers passed into the script have provided address.\\n    function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\\n\\n    // ======== Environment ========\\n\\n    /// Gets the environment variable `name` and parses it as `address`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envAddress(string calldata name) external view returns (address value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as `bool`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envBool(string calldata name) external view returns (bool value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as `bytes32`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envBytes32(string calldata name) external view returns (bytes32 value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as `bytes`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envBytes(string calldata name) external view returns (bytes memory value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\\n\\n    /// Gets the environment variable `name` and returns true if it exists, else returns false.\\n    function envExists(string calldata name) external view returns (bool result);\\n\\n    /// Gets the environment variable `name` and parses it as `int256`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envInt(string calldata name) external view returns (int256 value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as `bool`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\\n\\n    /// Gets the environment variable `name` and parses it as `uint256`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\\n        external\\n        view\\n        returns (address[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\\n        external\\n        view\\n        returns (bytes32[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\\n        external\\n        view\\n        returns (string[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\\n        external\\n        view\\n        returns (bytes[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as `int256`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\\n\\n    /// Gets the environment variable `name` and parses it as `address`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, address defaultValue) external view returns (address value);\\n\\n    /// Gets the environment variable `name` and parses it as `bytes32`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);\\n\\n    /// Gets the environment variable `name` and parses it as `string`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);\\n\\n    /// Gets the environment variable `name` and parses it as `bytes`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\\n        external\\n        view\\n        returns (bool[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\\n        external\\n        view\\n        returns (uint256[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\\n    /// Reverts if the variable could not be parsed.\\n    /// Returns `defaultValue` if the variable was not found.\\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\\n        external\\n        view\\n        returns (int256[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as `string`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envString(string calldata name) external view returns (string memory value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\\n\\n    /// Gets the environment variable `name` and parses it as `uint256`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envUint(string calldata name) external view returns (uint256 value);\\n\\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\\n    /// Reverts if the variable was not found or could not be parsed.\\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\\n\\n    /// Returns true if `forge` command was executed in given context.\\n    function isContext(ForgeContext context) external view returns (bool result);\\n\\n    /// Sets environment variables.\\n    function setEnv(string calldata name, string calldata value) external;\\n\\n    // ======== EVM ========\\n\\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\\n\\n    /// Gets the address for a given private key.\\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\\n\\n    /// Gets all the logs according to specified filter.\\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\\n        external\\n        returns (EthGetLogs[] memory logs);\\n\\n    /// Gets the current `block.blobbasefee`.\\n    /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,\\n    /// and as a result will get optimized out by the compiler.\\n    /// See https://github.com/foundry-rs/foundry/issues/6180\\n    function getBlobBaseFee() external view returns (uint256 blobBaseFee);\\n\\n    /// Gets the current `block.number`.\\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\\n    /// and as a result will get optimized out by the compiler.\\n    /// See https://github.com/foundry-rs/foundry/issues/6180\\n    function getBlockNumber() external view returns (uint256 height);\\n\\n    /// Gets the current `block.timestamp`.\\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\\n    /// and as a result will get optimized out by the compiler.\\n    /// See https://github.com/foundry-rs/foundry/issues/6180\\n    function getBlockTimestamp() external view returns (uint256 timestamp);\\n\\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\\n        external\\n        returns (bool found, bytes32 key, bytes32 parent);\\n\\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\\n\\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\\n\\n    /// Gets the nonce of an account.\\n    function getNonce(address account) external view returns (uint64 nonce);\\n\\n    /// Get the nonce of a `Wallet`.\\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\\n\\n    /// Gets the RLP encoded block header for a given block number.\\n    /// Returns the block header in the same format as `cast block <block_number> --raw`.\\n    function getRawBlockHeader(uint256 blockNumber) external view returns (bytes memory rlpHeader);\\n\\n    /// Gets all the recorded logs.\\n    function getRecordedLogs() external returns (Log[] memory logs);\\n\\n    /// Returns state diffs from current `vm.startStateDiffRecording` session.\\n    function getStateDiff() external view returns (string memory diff);\\n\\n    /// Returns state diffs from current `vm.startStateDiffRecording` session, in json format.\\n    function getStateDiffJson() external view returns (string memory diff);\\n\\n    /// Gets the gas used in the last call from the callee perspective.\\n    function lastCallGas() external view returns (Gas memory gas);\\n\\n    /// Loads a storage slot from an address.\\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\\n\\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\\n    function pauseGasMetering() external;\\n\\n    /// Records all storage reads and writes. Use `accesses` to get the recorded data.\\n    /// Subsequent calls to `record` will clear the previous data.\\n    function record() external;\\n\\n    /// Record all the transaction logs.\\n    function recordLogs() external;\\n\\n    /// Reset gas metering (i.e. gas usage is set to gas limit).\\n    function resetGasMetering() external;\\n\\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\\n    function resumeGasMetering() external;\\n\\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\\n\\n    /// Performs an Ethereum JSON-RPC request to the given endpoint.\\n    function rpc(string calldata urlOrAlias, string calldata method, string calldata params)\\n        external\\n        returns (bytes memory data);\\n\\n    /// Records the debug trace during the run.\\n    function startDebugTraceRecording() external;\\n\\n    /// Starts recording all map SSTOREs for later retrieval.\\n    function startMappingRecording() external;\\n\\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\\n    /// along with the context of the calls\\n    function startStateDiffRecording() external;\\n\\n    /// Stop debug trace recording and returns the recorded debug trace.\\n    function stopAndReturnDebugTraceRecording() external returns (DebugStep[] memory step);\\n\\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\\n\\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\\n    function stopMappingRecording() external;\\n\\n    /// Stops recording storage reads and writes.\\n    function stopRecord() external;\\n\\n    // ======== Filesystem ========\\n\\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\\n    /// `path` is relative to the project root.\\n    function closeFile(string calldata path) external;\\n\\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\\n    /// Both `from` and `to` are relative to the project root.\\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\\n\\n    /// Creates a new, empty directory at the provided path.\\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\\n    /// - User lacks permissions to modify `path`.\\n    /// - A parent of the given path doesn't exist and `recursive` is false.\\n    /// - `path` already exists and `recursive` is false.\\n    /// `path` is relative to the project root.\\n    function createDir(string calldata path, bool recursive) external;\\n\\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    function deployCode(string calldata artifactPath) external returns (address deployedAddress);\\n\\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    /// Additionally accepts abi-encoded constructor arguments.\\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs)\\n        external\\n        returns (address deployedAddress);\\n\\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    /// Additionally accepts `msg.value`.\\n    function deployCode(string calldata artifactPath, uint256 value) external returns (address deployedAddress);\\n\\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    /// Additionally accepts abi-encoded constructor arguments and `msg.value`.\\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, uint256 value)\\n        external\\n        returns (address deployedAddress);\\n\\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    function deployCode(string calldata artifactPath, bytes32 salt) external returns (address deployedAddress);\\n\\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    /// Additionally accepts abi-encoded constructor arguments.\\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, bytes32 salt)\\n        external\\n        returns (address deployedAddress);\\n\\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    /// Additionally accepts `msg.value`.\\n    function deployCode(string calldata artifactPath, uint256 value, bytes32 salt)\\n        external\\n        returns (address deployedAddress);\\n\\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    /// Additionally accepts abi-encoded constructor arguments and `msg.value`.\\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, uint256 value, bytes32 salt)\\n        external\\n        returns (address deployedAddress);\\n\\n    /// Returns true if the given path points to an existing entity, else returns false.\\n    function exists(string calldata path) external view returns (bool result);\\n\\n    /// Performs a foreign function call via the terminal.\\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\\n\\n    /// Given a path, query the file system to get information about a file, directory, etc.\\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\\n\\n    /// Gets the artifact path from code (aka. creation code).\\n    function getArtifactPathByCode(bytes calldata code) external view returns (string memory path);\\n\\n    /// Gets the artifact path from deployed code (aka. runtime code).\\n    function getArtifactPathByDeployedCode(bytes calldata deployedCode) external view returns (string memory path);\\n\\n    /// Returns the most recent broadcast for the given contract on `chainId` matching `txType`.\\n    /// For example:\\n    /// The most recent deployment can be fetched by passing `txType` as `CREATE` or `CREATE2`.\\n    /// The most recent call can be fetched by passing `txType` as `CALL`.\\n    function getBroadcast(string calldata contractName, uint64 chainId, BroadcastTxType txType)\\n        external\\n        view\\n        returns (BroadcastTxSummary memory);\\n\\n    /// Returns all broadcasts for the given contract on `chainId` with the specified `txType`.\\n    /// Sorted such that the most recent broadcast is the first element, and the oldest is the last. i.e descending order of BroadcastTxSummary.blockNumber.\\n    function getBroadcasts(string calldata contractName, uint64 chainId, BroadcastTxType txType)\\n        external\\n        view\\n        returns (BroadcastTxSummary[] memory);\\n\\n    /// Returns all broadcasts for the given contract on `chainId`.\\n    /// Sorted such that the most recent broadcast is the first element, and the oldest is the last. i.e descending order of BroadcastTxSummary.blockNumber.\\n    function getBroadcasts(string calldata contractName, uint64 chainId)\\n        external\\n        view\\n        returns (BroadcastTxSummary[] memory);\\n\\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\\n\\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the\\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\\n\\n    /// Returns the most recent deployment for the current `chainId`.\\n    function getDeployment(string calldata contractName) external view returns (address deployedAddress);\\n\\n    /// Returns the most recent deployment for the given contract on `chainId`\\n    function getDeployment(string calldata contractName, uint64 chainId)\\n        external\\n        view\\n        returns (address deployedAddress);\\n\\n    /// Returns all deployments for the given contract on `chainId`\\n    /// Sorted in descending order of deployment time i.e descending order of BroadcastTxSummary.blockNumber.\\n    /// The most recent deployment is the first element, and the oldest is the last.\\n    function getDeployments(string calldata contractName, uint64 chainId)\\n        external\\n        view\\n        returns (address[] memory deployedAddresses);\\n\\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\\n    function isDir(string calldata path) external view returns (bool result);\\n\\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\\n    function isFile(string calldata path) external view returns (bool result);\\n\\n    /// Get the path of the current project root.\\n    function projectRoot() external view returns (string memory path);\\n\\n    /// Prompts the user for a string value in the terminal.\\n    function prompt(string calldata promptText) external returns (string memory input);\\n\\n    /// Prompts the user for an address in the terminal.\\n    function promptAddress(string calldata promptText) external returns (address);\\n\\n    /// Prompts the user for a hidden string value in the terminal.\\n    function promptSecret(string calldata promptText) external returns (string memory input);\\n\\n    /// Prompts the user for hidden uint256 in the terminal (usually pk).\\n    function promptSecretUint(string calldata promptText) external returns (uint256);\\n\\n    /// Prompts the user for uint256 in the terminal.\\n    function promptUint(string calldata promptText) external returns (uint256);\\n\\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\\n    /// Follows symbolic links if `followLinks` is true.\\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\\n\\n    /// See `readDir(string)`.\\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\\n\\n    /// See `readDir(string)`.\\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\\n        external\\n        view\\n        returns (DirEntry[] memory entries);\\n\\n    /// Reads the entire content of file to string. `path` is relative to the project root.\\n    function readFile(string calldata path) external view returns (string memory data);\\n\\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\\n\\n    /// Reads next line of file to string.\\n    function readLine(string calldata path) external view returns (string memory line);\\n\\n    /// Reads a symbolic link, returning the path that the link points to.\\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\\n    /// - `path` is not a symbolic link.\\n    /// - `path` does not exist.\\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\\n\\n    /// Removes a directory at the provided path.\\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\\n    /// - `path` doesn't exist.\\n    /// - `path` isn't a directory.\\n    /// - User lacks permissions to modify `path`.\\n    /// - The directory is not empty and `recursive` is false.\\n    /// `path` is relative to the project root.\\n    function removeDir(string calldata path, bool recursive) external;\\n\\n    /// Removes a file from the filesystem.\\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\\n    /// - `path` points to a directory.\\n    /// - The file doesn't exist.\\n    /// - The user lacks permissions to remove the file.\\n    /// `path` is relative to the project root.\\n    function removeFile(string calldata path) external;\\n\\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\\n\\n    /// Returns the time since unix epoch in milliseconds.\\n    function unixTime() external view returns (uint256 milliseconds);\\n\\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\\n    /// `path` is relative to the project root.\\n    function writeFile(string calldata path, string calldata data) external;\\n\\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\\n    /// `path` is relative to the project root.\\n    function writeFileBinary(string calldata path, bytes calldata data) external;\\n\\n    /// Writes line to file, creating a file if it does not exist.\\n    /// `path` is relative to the project root.\\n    function writeLine(string calldata path, string calldata data) external;\\n\\n    // ======== JSON ========\\n\\n    /// Checks if `key` exists in a JSON object.\\n    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\\n    function parseJsonAddressArray(string calldata json, string calldata key)\\n        external\\n        pure\\n        returns (address[] memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\\n    function parseJsonBytes32Array(string calldata json, string calldata key)\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\\n\\n    /// Returns an array of all the keys in a JSON object.\\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to type array corresponding to `typeDescription`.\\n    function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)\\n        external\\n        pure\\n        returns (bytes memory);\\n\\n    /// Parses a string of JSON data and coerces it to type corresponding to `typeDescription`.\\n    function parseJsonType(string calldata json, string calldata typeDescription)\\n        external\\n        pure\\n        returns (bytes memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to type corresponding to `typeDescription`.\\n    function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)\\n        external\\n        pure\\n        returns (bytes memory);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\\n\\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\\n\\n    /// ABI-encodes a JSON object.\\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\\n\\n    /// ABI-encodes a JSON object at `key`.\\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\\n\\n    /// See `serializeJson`.\\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\\n        external\\n        returns (string memory json);\\n\\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\\n    /// Returns the stringified version of the specific JSON file up to that moment.\\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeJsonType(string calldata typeDescription, bytes calldata value)\\n        external\\n        pure\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeJsonType(\\n        string calldata objectKey,\\n        string calldata valueKey,\\n        string calldata typeDescription,\\n        bytes calldata value\\n    ) external returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\\n        external\\n        returns (string memory json);\\n\\n    /// See `serializeJson`.\\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\\n        external\\n        returns (string memory json);\\n\\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\\n    function writeJson(string calldata json, string calldata path) external;\\n\\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\\n\\n    /// Checks if `key` exists in a JSON object\\n    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.\\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\\n\\n    // ======== Scripting ========\\n\\n    /// Attach an EIP-4844 blob to the next call\\n    function attachBlob(bytes calldata blob) external;\\n\\n    /// Designate the next call as an EIP-7702 transaction\\n    function attachDelegation(SignedDelegation calldata signedDelegation) external;\\n\\n    /// Designate the next call as an EIP-7702 transaction, with optional cross-chain validity.\\n    function attachDelegation(SignedDelegation calldata signedDelegation, bool crossChain) external;\\n\\n    /// Takes a signed transaction and broadcasts it to the network.\\n    function broadcastRawTransaction(bytes calldata data) external;\\n\\n    /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.\\n    /// Broadcasting address is determined by checking the following in order:\\n    /// 1. If `--sender` argument was provided, that address is used.\\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\\n    function broadcast() external;\\n\\n    /// Has the next call (at this call depth only) create a transaction with the address provided\\n    /// as the sender that can later be signed and sent onchain.\\n    function broadcast(address signer) external;\\n\\n    /// Has the next call (at this call depth only) create a transaction with the private key\\n    /// provided as the sender that can later be signed and sent onchain.\\n    function broadcast(uint256 privateKey) external;\\n\\n    /// Returns addresses of available unlocked wallets in the script environment.\\n    function getWallets() external returns (address[] memory wallets);\\n\\n    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction\\n    function signAndAttachDelegation(address implementation, uint256 privateKey)\\n        external\\n        returns (SignedDelegation memory signedDelegation);\\n\\n    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction for specific nonce\\n    function signAndAttachDelegation(address implementation, uint256 privateKey, uint64 nonce)\\n        external\\n        returns (SignedDelegation memory signedDelegation);\\n\\n    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction, with optional cross-chain validity.\\n    function signAndAttachDelegation(address implementation, uint256 privateKey, bool crossChain)\\n        external\\n        returns (SignedDelegation memory signedDelegation);\\n\\n    /// Sign an EIP-7702 authorization for delegation\\n    function signDelegation(address implementation, uint256 privateKey)\\n        external\\n        returns (SignedDelegation memory signedDelegation);\\n\\n    /// Sign an EIP-7702 authorization for delegation for specific nonce\\n    function signDelegation(address implementation, uint256 privateKey, uint64 nonce)\\n        external\\n        returns (SignedDelegation memory signedDelegation);\\n\\n    /// Sign an EIP-7702 authorization for delegation, with optional cross-chain validity.\\n    function signDelegation(address implementation, uint256 privateKey, bool crossChain)\\n        external\\n        returns (SignedDelegation memory signedDelegation);\\n\\n    /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.\\n    /// Broadcasting address is determined by checking the following in order:\\n    /// 1. If `--sender` argument was provided, that address is used.\\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\\n    function startBroadcast() external;\\n\\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\\n    /// provided that can later be signed and sent onchain.\\n    function startBroadcast(address signer) external;\\n\\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\\n    /// provided that can later be signed and sent onchain.\\n    function startBroadcast(uint256 privateKey) external;\\n\\n    /// Stops collecting onchain transactions.\\n    function stopBroadcast() external;\\n\\n    // ======== String ========\\n\\n    /// Returns true if `search` is found in `subject`, false otherwise.\\n    function contains(string calldata subject, string calldata search) external returns (bool result);\\n\\n    /// Returns the index of the first occurrence of a `key` in an `input` string.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.\\n    /// Returns 0 in case of an empty `key`.\\n    function indexOf(string calldata input, string calldata key) external pure returns (uint256);\\n\\n    /// Parses the given `string` into an `address`.\\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\\n\\n    /// Parses the given `string` into a `bool`.\\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\\n\\n    /// Parses the given `string` into `bytes`.\\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\\n\\n    /// Parses the given `string` into a `bytes32`.\\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\\n\\n    /// Parses the given `string` into a `int256`.\\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\\n\\n    /// Parses the given `string` into a `uint256`.\\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\\n\\n    /// Replaces occurrences of `from` in the given `string` with `to`.\\n    function replace(string calldata input, string calldata from, string calldata to)\\n        external\\n        pure\\n        returns (string memory output);\\n\\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\\n    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);\\n\\n    /// Converts the given `string` value to Lowercase.\\n    function toLowercase(string calldata input) external pure returns (string memory output);\\n\\n    /// Converts the given value to a `string`.\\n    function toString(address value) external pure returns (string memory stringifiedValue);\\n\\n    /// Converts the given value to a `string`.\\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\\n\\n    /// Converts the given value to a `string`.\\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\\n\\n    /// Converts the given value to a `string`.\\n    function toString(bool value) external pure returns (string memory stringifiedValue);\\n\\n    /// Converts the given value to a `string`.\\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\\n\\n    /// Converts the given value to a `string`.\\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\\n\\n    /// Converts the given `string` value to Uppercase.\\n    function toUppercase(string calldata input) external pure returns (string memory output);\\n\\n    /// Trims leading and trailing whitespace from the given `string` value.\\n    function trim(string calldata input) external pure returns (string memory output);\\n\\n    // ======== Testing ========\\n\\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\\n    /// Formats values with decimals in failure message.\\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;\\n\\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertApproxEqAbsDecimal(\\n        uint256 left,\\n        uint256 right,\\n        uint256 maxDelta,\\n        uint256 decimals,\\n        string calldata error\\n    ) external pure;\\n\\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\\n    /// Formats values with decimals in failure message.\\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;\\n\\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertApproxEqAbsDecimal(\\n        int256 left,\\n        int256 right,\\n        uint256 maxDelta,\\n        uint256 decimals,\\n        string calldata error\\n    ) external pure;\\n\\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\\n\\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\\n    /// Includes error message into revert string on failure.\\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\\n\\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\\n    /// Includes error message into revert string on failure.\\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\\n    /// Formats values with decimals in failure message.\\n    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)\\n        external\\n        pure;\\n\\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertApproxEqRelDecimal(\\n        uint256 left,\\n        uint256 right,\\n        uint256 maxPercentDelta,\\n        uint256 decimals,\\n        string calldata error\\n    ) external pure;\\n\\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\\n    /// Formats values with decimals in failure message.\\n    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)\\n        external\\n        pure;\\n\\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertApproxEqRelDecimal(\\n        int256 left,\\n        int256 right,\\n        uint256 maxPercentDelta,\\n        uint256 decimals,\\n        string calldata error\\n    ) external pure;\\n\\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\\n\\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\\n    /// Includes error message into revert string on failure.\\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)\\n        external\\n        pure;\\n\\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\\n\\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\\n    /// Includes error message into revert string on failure.\\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)\\n        external\\n        pure;\\n\\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\\n\\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\\n    /// Includes error message into revert string on failure.\\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\\n\\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\\n    /// Includes error message into revert string on failure.\\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Asserts that two `bool` values are equal.\\n    function assertEq(bool left, bool right) external pure;\\n\\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\\n    function assertEq(bool left, bool right, string calldata error) external pure;\\n\\n    /// Asserts that two `string` values are equal.\\n    function assertEq(string calldata left, string calldata right) external pure;\\n\\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\\n    function assertEq(string calldata left, string calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two `bytes` values are equal.\\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\\n\\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\\n    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `bool` values are equal.\\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\\n    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `uint256 values are equal.\\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\\n    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `int256` values are equal.\\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\\n    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two `uint256` values are equal.\\n    function assertEq(uint256 left, uint256 right) external pure;\\n\\n    /// Asserts that two arrays of `address` values are equal.\\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\\n    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `bytes32` values are equal.\\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `string` values are equal.\\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\\n    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `bytes` values are equal.\\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\\n    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\\n\\n    /// Asserts that two `int256` values are equal.\\n    function assertEq(int256 left, int256 right) external pure;\\n\\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\\n\\n    /// Asserts that two `address` values are equal.\\n    function assertEq(address left, address right) external pure;\\n\\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\\n    function assertEq(address left, address right, string calldata error) external pure;\\n\\n    /// Asserts that two `bytes32` values are equal.\\n    function assertEq(bytes32 left, bytes32 right) external pure;\\n\\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\\n\\n    /// Asserts that the given condition is false.\\n    function assertFalse(bool condition) external pure;\\n\\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\\n    function assertFalse(bool condition, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\\n    /// Formats values with decimals in failure message.\\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\\n    /// Formats values with decimals in failure message.\\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\\n    function assertGe(uint256 left, uint256 right) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\\n    /// Includes error message into revert string on failure.\\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\\n    function assertGe(int256 left, int256 right) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\\n    /// Includes error message into revert string on failure.\\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be greater than second.\\n    /// Formats values with decimals in failure message.\\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be greater than second.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be greater than second.\\n    /// Formats values with decimals in failure message.\\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be greater than second.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be greater than second.\\n    function assertGt(uint256 left, uint256 right) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be greater than second.\\n    /// Includes error message into revert string on failure.\\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be greater than second.\\n    function assertGt(int256 left, int256 right) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be greater than second.\\n    /// Includes error message into revert string on failure.\\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\\n    /// Formats values with decimals in failure message.\\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\\n    /// Formats values with decimals in failure message.\\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\\n    function assertLe(uint256 left, uint256 right) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\\n    /// Includes error message into revert string on failure.\\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\\n    function assertLe(int256 left, int256 right) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\\n    /// Includes error message into revert string on failure.\\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be less than second.\\n    /// Formats values with decimals in failure message.\\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be less than second.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be less than second.\\n    /// Formats values with decimals in failure message.\\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be less than second.\\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be less than second.\\n    function assertLt(uint256 left, uint256 right) external pure;\\n\\n    /// Compares two `uint256` values. Expects first value to be less than second.\\n    /// Includes error message into revert string on failure.\\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be less than second.\\n    function assertLt(int256 left, int256 right) external pure;\\n\\n    /// Compares two `int256` values. Expects first value to be less than second.\\n    /// Includes error message into revert string on failure.\\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\\n\\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\\n\\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\\n    /// Includes error message into revert string on failure.\\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\\n\\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\\n    /// Includes error message into revert string on failure.\\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\\n\\n    /// Asserts that two `bool` values are not equal.\\n    function assertNotEq(bool left, bool right) external pure;\\n\\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\\n\\n    /// Asserts that two `string` values are not equal.\\n    function assertNotEq(string calldata left, string calldata right) external pure;\\n\\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two `bytes` values are not equal.\\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\\n\\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `bool` values are not equal.\\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `uint256` values are not equal.\\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `int256` values are not equal.\\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two `uint256` values are not equal.\\n    function assertNotEq(uint256 left, uint256 right) external pure;\\n\\n    /// Asserts that two arrays of `address` values are not equal.\\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `bytes32` values are not equal.\\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `string` values are not equal.\\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two arrays of `bytes` values are not equal.\\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\\n\\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\\n\\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\\n\\n    /// Asserts that two `int256` values are not equal.\\n    function assertNotEq(int256 left, int256 right) external pure;\\n\\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\\n\\n    /// Asserts that two `address` values are not equal.\\n    function assertNotEq(address left, address right) external pure;\\n\\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(address left, address right, string calldata error) external pure;\\n\\n    /// Asserts that two `bytes32` values are not equal.\\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\\n\\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\\n\\n    /// Asserts that the given condition is true.\\n    function assertTrue(bool condition) external pure;\\n\\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\\n    function assertTrue(bool condition, string calldata error) external pure;\\n\\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\\n    function assume(bool condition) external pure;\\n\\n    /// Discard this run's fuzz inputs and generate new ones if next call reverted.\\n    function assumeNoRevert() external pure;\\n\\n    /// Discard this run's fuzz inputs and generate new ones if next call reverts with the potential revert parameters.\\n    function assumeNoRevert(PotentialRevert calldata potentialRevert) external pure;\\n\\n    /// Discard this run's fuzz inputs and generate new ones if next call reverts with the any of the potential revert parameters.\\n    function assumeNoRevert(PotentialRevert[] calldata potentialReverts) external pure;\\n\\n    /// Writes a breakpoint to jump to in the debugger.\\n    function breakpoint(string calldata char) external pure;\\n\\n    /// Writes a conditional breakpoint to jump to in the debugger.\\n    function breakpoint(string calldata char, bool value) external pure;\\n\\n    /// Returns true if the current Foundry version is greater than or equal to the given version.\\n    /// The given version string must be in the format `major.minor.patch`.\\n    /// This is equivalent to `foundryVersionCmp(version) >= 0`.\\n    function foundryVersionAtLeast(string calldata version) external view returns (bool);\\n\\n    /// Compares the current Foundry version with the given version string.\\n    /// The given version string must be in the format `major.minor.patch`.\\n    /// Returns:\\n    /// -1 if current Foundry version is less than the given version\\n    /// 0 if current Foundry version equals the given version\\n    /// 1 if current Foundry version is greater than the given version\\n    /// This result can then be used with a comparison operator against `0`.\\n    /// For example, to check if the current Foundry version is greater than or equal to `1.0.0`:\\n    /// `if (foundryVersionCmp(\\\"1.0.0\\\") >= 0) { ... }`\\n    function foundryVersionCmp(string calldata version) external view returns (int256);\\n\\n    /// Returns a Chain struct for specific alias\\n    function getChain(string calldata chainAlias) external view returns (Chain memory chain);\\n\\n    /// Returns a Chain struct for specific chainId\\n    function getChain(uint256 chainId) external view returns (Chain memory chain);\\n\\n    /// Returns the Foundry version.\\n    /// Format: <cargo_version>-<tag>+<git_sha_short>.<unix_build_timestamp>.<profile>\\n    /// Sample output: 0.3.0-nightly+3cb96bde9b.1737036656.debug\\n    /// Note: Build timestamps may vary slightly across platforms due to separate CI jobs.\\n    /// For reliable version comparisons, use UNIX format (e.g., >= 1700000000)\\n    /// to compare timestamps while ignoring minor time differences.\\n    function getFoundryVersion() external view returns (string memory version);\\n\\n    /// Returns the RPC url for the given alias.\\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\\n\\n    /// Returns all rpc urls and their aliases as structs.\\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\\n\\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\\n    function rpcUrls() external view returns (string[2][] memory urls);\\n\\n    /// Suspends execution of the main thread for `duration` milliseconds.\\n    function sleep(uint256 duration) external;\\n\\n    // ======== Toml ========\\n\\n    /// Checks if `key` exists in a TOML table.\\n    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `address`.\\n    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `address[]`.\\n    function parseTomlAddressArray(string calldata toml, string calldata key)\\n        external\\n        pure\\n        returns (address[] memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `bool`.\\n    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.\\n    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `bytes`.\\n    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.\\n    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.\\n    function parseTomlBytes32Array(string calldata toml, string calldata key)\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.\\n    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `int256`.\\n    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.\\n    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);\\n\\n    /// Returns an array of all the keys in a TOML table.\\n    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `string`.\\n    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `string[]`.\\n    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to type array corresponding to `typeDescription`.\\n    function parseTomlTypeArray(string calldata toml, string calldata key, string calldata typeDescription)\\n        external\\n        pure\\n        returns (bytes memory);\\n\\n    /// Parses a string of TOML data and coerces it to type corresponding to `typeDescription`.\\n    function parseTomlType(string calldata toml, string calldata typeDescription)\\n        external\\n        pure\\n        returns (bytes memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to type corresponding to `typeDescription`.\\n    function parseTomlType(string calldata toml, string calldata key, string calldata typeDescription)\\n        external\\n        pure\\n        returns (bytes memory);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `uint256`.\\n    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);\\n\\n    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.\\n    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);\\n\\n    /// ABI-encodes a TOML table.\\n    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);\\n\\n    /// ABI-encodes a TOML table at `key`.\\n    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);\\n\\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.\\n    function writeToml(string calldata json, string calldata path) external;\\n\\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\\n    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.\\n    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;\\n\\n    // ======== Utilities ========\\n\\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\\n        external\\n        pure\\n        returns (address);\\n\\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\\n\\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\\n\\n    /// Utility cheatcode to copy storage of `from` contract to another `to` contract.\\n    function copyStorage(address from, address to) external;\\n\\n    /// Generates the struct hash of the canonical EIP-712 type representation and its abi-encoded data.\\n    /// Supports 2 different inputs:\\n    /// 1. Name of the type (i.e. \\\"PermitSingle\\\"):\\n    /// * requires previous binding generation with `forge bind-json`.\\n    /// * bindings will be retrieved from the path configured in `foundry.toml`.\\n    /// 2. String representation of the type (i.e. \\\"Foo(Bar bar) Bar(uint256 baz)\\\").\\n    /// * Note: the cheatcode will use the canonical type even if the input is malformated\\n    /// with the wrong order of elements or with extra whitespaces.\\n    function eip712HashStruct(string calldata typeNameOrDefinition, bytes calldata abiEncodedData)\\n        external\\n        pure\\n        returns (bytes32 typeHash);\\n\\n    /// Generates the struct hash of the canonical EIP-712 type representation and its abi-encoded data.\\n    /// Requires previous binding generation with `forge bind-json`.\\n    /// Params:\\n    /// * `bindingsPath`: path where the output of `forge bind-json` is stored.\\n    /// * `typeName`: Name of the type (i.e. \\\"PermitSingle\\\").\\n    /// * `abiEncodedData`: ABI-encoded data for the struct that is being hashed.\\n    function eip712HashStruct(string calldata bindingsPath, string calldata typeName, bytes calldata abiEncodedData)\\n        external\\n        pure\\n        returns (bytes32 typeHash);\\n\\n    /// Generates the hash of the canonical EIP-712 type representation.\\n    /// Supports 2 different inputs:\\n    /// 1. Name of the type (i.e. \\\"Transaction\\\"):\\n    /// * requires previous binding generation with `forge bind-json`.\\n    /// * bindings will be retrieved from the path configured in `foundry.toml`.\\n    /// 2. String representation of the type (i.e. \\\"Foo(Bar bar) Bar(uint256 baz)\\\").\\n    /// * Note: the cheatcode will output the canonical type even if the input is malformated\\n    /// with the wrong order of elements or with extra whitespaces.\\n    function eip712HashType(string calldata typeNameOrDefinition) external pure returns (bytes32 typeHash);\\n\\n    /// Generates the hash of the canonical EIP-712 type representation.\\n    /// Requires previous binding generation with `forge bind-json`.\\n    /// Params:\\n    /// * `bindingsPath`: path where the output of `forge bind-json` is stored.\\n    /// * `typeName`: Name of the type (i.e. \\\"Transaction\\\").\\n    function eip712HashType(string calldata bindingsPath, string calldata typeName)\\n        external\\n        pure\\n        returns (bytes32 typeHash);\\n\\n    /// Generates a ready-to-sign digest of human-readable typed data following the EIP-712 standard.\\n    function eip712HashTypedData(string calldata jsonData) external pure returns (bytes32 digest);\\n\\n    /// Returns ENS namehash for provided string.\\n    function ensNamehash(string calldata name) external pure returns (bytes32);\\n\\n    /// Gets the label for the specified address.\\n    function getLabel(address account) external view returns (string memory currentLabel);\\n\\n    /// Labels an address in call traces.\\n    function label(address account, string calldata newLabel) external;\\n\\n    /// Pauses collection of call traces. Useful in cases when you want to skip tracing of\\n    /// complex calls which are not useful for debugging.\\n    function pauseTracing() external view;\\n\\n    /// Returns a random `address`.\\n    function randomAddress() external view returns (address);\\n\\n    /// Returns a random `bool`.\\n    function randomBool() external view returns (bool);\\n\\n    /// Returns a random byte array value of the given length.\\n    function randomBytes(uint256 len) external view returns (bytes memory);\\n\\n    /// Returns a random fixed-size byte array of length 4.\\n    function randomBytes4() external view returns (bytes4);\\n\\n    /// Returns a random fixed-size byte array of length 8.\\n    function randomBytes8() external view returns (bytes8);\\n\\n    /// Returns a random `int256` value.\\n    function randomInt() external view returns (int256);\\n\\n    /// Returns a random `int256` value of given bits.\\n    function randomInt(uint256 bits) external view returns (int256);\\n\\n    /// Returns a random uint256 value.\\n    function randomUint() external view returns (uint256);\\n\\n    /// Returns random uint256 value between the provided range (=min..=max).\\n    function randomUint(uint256 min, uint256 max) external view returns (uint256);\\n\\n    /// Returns a random `uint256` value of given bits.\\n    function randomUint(uint256 bits) external view returns (uint256);\\n\\n    /// Unpauses collection of call traces.\\n    function resumeTracing() external view;\\n\\n    /// Utility cheatcode to set arbitrary storage for given target address.\\n    function setArbitraryStorage(address target) external;\\n\\n    /// Utility cheatcode to set arbitrary storage for given target address and overwrite\\n    /// any storage slots that have been previously set.\\n    function setArbitraryStorage(address target, bool overwrite) external;\\n\\n    /// Set RNG seed.\\n    function setSeed(uint256 seed) external;\\n\\n    /// Randomly shuffles an array.\\n    function shuffle(uint256[] calldata array) external returns (uint256[] memory);\\n\\n    /// Sorts an array in ascending order.\\n    function sort(uint256[] calldata array) external returns (uint256[] memory);\\n\\n    /// Encodes a `bytes` value to a base64url string.\\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\\n\\n    /// Encodes a `string` value to a base64url string.\\n    function toBase64URL(string calldata data) external pure returns (string memory);\\n\\n    /// Encodes a `bytes` value to a base64 string.\\n    function toBase64(bytes calldata data) external pure returns (string memory);\\n\\n    /// Encodes a `string` value to a base64 string.\\n    function toBase64(string calldata data) external pure returns (string memory);\\n}\\n\\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\\n/// in tests, but it is not recommended to use these cheats in scripts.\\ninterface Vm is VmSafe {\\n    // ======== EVM ========\\n\\n    /// Utility cheatcode to set an EIP-2930 access list for all subsequent transactions.\\n    function accessList(AccessListItem[] calldata access) external;\\n\\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\\n    function activeFork() external view returns (uint256 forkId);\\n\\n    /// In forking mode, explicitly grant the given address cheatcode access.\\n    function allowCheatcodes(address account) external;\\n\\n    /// Sets `block.blobbasefee`\\n    function blobBaseFee(uint256 newBlobBaseFee) external;\\n\\n    /// Sets the blobhashes in the transaction.\\n    /// Not available on EVM versions before Cancun.\\n    /// If used on unsupported EVM versions it will revert.\\n    function blobhashes(bytes32[] calldata hashes) external;\\n\\n    /// Sets `block.chainid`.\\n    function chainId(uint256 newChainId) external;\\n\\n    /// Clears all mocked calls.\\n    function clearMockedCalls() external;\\n\\n    /// Clones a source account code, state, balance and nonce to a target account and updates in-memory EVM state.\\n    function cloneAccount(address source, address target) external;\\n\\n    /// Sets `block.coinbase`.\\n    function coinbase(address newCoinbase) external;\\n\\n    /// Marks the slots of an account and the account address as cold.\\n    function cool(address target) external;\\n\\n    /// Utility cheatcode to mark specific storage slot as cold, simulating no prior read.\\n    function coolSlot(address target, bytes32 slot) external;\\n\\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\\n\\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\\n\\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\\n\\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\\n\\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\\n\\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\\n\\n    /// Sets an address' balance.\\n    function deal(address account, uint256 newBalance) external;\\n\\n    /// Removes the snapshot with the given ID created by `snapshot`.\\n    /// Takes the snapshot ID to delete.\\n    /// Returns `true` if the snapshot was successfully deleted.\\n    /// Returns `false` if the snapshot does not exist.\\n    function deleteStateSnapshot(uint256 snapshotId) external returns (bool success);\\n\\n    /// Removes _all_ snapshots previously created by `snapshot`.\\n    function deleteStateSnapshots() external;\\n\\n    /// Sets `block.difficulty`.\\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\\n    /// Reverts if used on unsupported EVM versions.\\n    function difficulty(uint256 newDifficulty) external;\\n\\n    /// Dump a genesis JSON file's `allocs` to disk.\\n    function dumpState(string calldata pathToStateJson) external;\\n\\n    /// Sets an address' code.\\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\\n\\n    /// Sets `block.basefee`.\\n    function fee(uint256 newBasefee) external;\\n\\n    /// Gets the blockhashes from the current transaction.\\n    /// Not available on EVM versions before Cancun.\\n    /// If used on unsupported EVM versions it will revert.\\n    function getBlobhashes() external view returns (bytes32[] memory hashes);\\n\\n    /// Returns true if the account is marked as persistent.\\n    function isPersistent(address account) external view returns (bool persistent);\\n\\n    /// Load a genesis JSON file's `allocs` into the in-memory EVM state.\\n    function loadAllocs(string calldata pathToAllocsJson) external;\\n\\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\\n    function makePersistent(address account) external;\\n\\n    /// See `makePersistent(address)`.\\n    function makePersistent(address account0, address account1) external;\\n\\n    /// See `makePersistent(address)`.\\n    function makePersistent(address account0, address account1, address account2) external;\\n\\n    /// See `makePersistent(address)`.\\n    function makePersistent(address[] calldata accounts) external;\\n\\n    /// Reverts a call to an address with specified revert data.\\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\\n\\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\\n        external;\\n\\n    /// Reverts a call to an address with specified revert data.\\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\\n    function mockCallRevert(address callee, bytes4 data, bytes calldata revertData) external;\\n\\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\\n    function mockCallRevert(address callee, uint256 msgValue, bytes4 data, bytes calldata revertData) external;\\n\\n    /// Mocks a call to an address, returning specified data.\\n    /// Calldata can either be strict or a partial match, e.g. if you only\\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\\n    /// function will be mocked.\\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\\n\\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\\n\\n    /// Mocks a call to an address, returning specified data.\\n    /// Calldata can either be strict or a partial match, e.g. if you only\\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\\n    /// function will be mocked.\\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\\n    function mockCall(address callee, bytes4 data, bytes calldata returnData) external;\\n\\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\\n    function mockCall(address callee, uint256 msgValue, bytes4 data, bytes calldata returnData) external;\\n\\n    /// Mocks multiple calls to an address, returning specified data for each call.\\n    function mockCalls(address callee, bytes calldata data, bytes[] calldata returnData) external;\\n\\n    /// Mocks multiple calls to an address with a specific `msg.value`, returning specified data for each call.\\n    function mockCalls(address callee, uint256 msgValue, bytes calldata data, bytes[] calldata returnData) external;\\n\\n    /// Whenever a call is made to `callee` with calldata `data`, this cheatcode instead calls\\n    /// `target` with the same calldata. This functionality is similar to a delegate call made to\\n    /// `target` contract from `callee`.\\n    /// Can be used to substitute a call to a function with another implementation that captures\\n    /// the primary logic of the original function but is easier to reason about.\\n    /// If calldata is not a strict match then partial match by selector is attempted.\\n    function mockFunction(address callee, address target, bytes calldata data) external;\\n\\n    /// Utility cheatcode to remove any EIP-2930 access list set by `accessList` cheatcode.\\n    function noAccessList() external;\\n\\n    /// Sets the *next* call's `msg.sender` to be the input address.\\n    function prank(address msgSender) external;\\n\\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\\n    function prank(address msgSender, address txOrigin) external;\\n\\n    /// Sets the *next* delegate call's `msg.sender` to be the input address.\\n    function prank(address msgSender, bool delegateCall) external;\\n\\n    /// Sets the *next* delegate call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\\n    function prank(address msgSender, address txOrigin, bool delegateCall) external;\\n\\n    /// Sets `block.prevrandao`.\\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\\n    /// If used on unsupported EVM versions it will revert.\\n    function prevrandao(bytes32 newPrevrandao) external;\\n\\n    /// Sets `block.prevrandao`.\\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\\n    /// If used on unsupported EVM versions it will revert.\\n    function prevrandao(uint256 newPrevrandao) external;\\n\\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\\n\\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\\n    function resetNonce(address account) external;\\n\\n    /// Revert the state of the EVM to a previous snapshot\\n    /// Takes the snapshot ID to revert to.\\n    /// Returns `true` if the snapshot was successfully reverted.\\n    /// Returns `false` if the snapshot does not exist.\\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.\\n    function revertToState(uint256 snapshotId) external returns (bool success);\\n\\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\\n    /// Takes the snapshot ID to revert to.\\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\\n    /// Returns `false` if the snapshot does not exist.\\n    function revertToStateAndDelete(uint256 snapshotId) external returns (bool success);\\n\\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\\n    function revokePersistent(address account) external;\\n\\n    /// See `revokePersistent(address)`.\\n    function revokePersistent(address[] calldata accounts) external;\\n\\n    /// Sets `block.height`.\\n    function roll(uint256 newHeight) external;\\n\\n    /// Updates the currently active fork to given block number\\n    /// This is similar to `roll` but for the currently active fork.\\n    function rollFork(uint256 blockNumber) external;\\n\\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\\n    function rollFork(bytes32 txHash) external;\\n\\n    /// Updates the given fork to given block number.\\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\\n\\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\\n    function rollFork(uint256 forkId, bytes32 txHash) external;\\n\\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\\n    function selectFork(uint256 forkId) external;\\n\\n    /// Set blockhash for the current block.\\n    /// It only sets the blockhash for blocks where `block.number - 256 <= number < block.number`.\\n    function setBlockhash(uint256 blockNumber, bytes32 blockHash) external;\\n\\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\\n    function setNonce(address account, uint64 newNonce) external;\\n\\n    /// Sets the nonce of an account to an arbitrary value.\\n    function setNonceUnsafe(address account, uint64 newNonce) external;\\n\\n    /// Snapshot capture the gas usage of the last call by name from the callee perspective.\\n    function snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);\\n\\n    /// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.\\n    function snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);\\n\\n    /// Snapshot the current state of the evm.\\n    /// Returns the ID of the snapshot that was created.\\n    /// To revert a snapshot use `revertToState`.\\n    function snapshotState() external returns (uint256 snapshotId);\\n\\n    /// Snapshot capture an arbitrary numerical value by name.\\n    /// The group name is derived from the contract name.\\n    function snapshotValue(string calldata name, uint256 value) external;\\n\\n    /// Snapshot capture an arbitrary numerical value by name in a group.\\n    function snapshotValue(string calldata group, string calldata name, uint256 value) external;\\n\\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\\n    function startPrank(address msgSender) external;\\n\\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\\n    function startPrank(address msgSender, address txOrigin) external;\\n\\n    /// Sets all subsequent delegate calls' `msg.sender` to be the input address until `stopPrank` is called.\\n    function startPrank(address msgSender, bool delegateCall) external;\\n\\n    /// Sets all subsequent delegate calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\\n    function startPrank(address msgSender, address txOrigin, bool delegateCall) external;\\n\\n    /// Start a snapshot capture of the current gas usage by name.\\n    /// The group name is derived from the contract name.\\n    function startSnapshotGas(string calldata name) external;\\n\\n    /// Start a snapshot capture of the current gas usage by name in a group.\\n    function startSnapshotGas(string calldata group, string calldata name) external;\\n\\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\\n    function stopPrank() external;\\n\\n    /// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.\\n    function stopSnapshotGas() external returns (uint256 gasUsed);\\n\\n    /// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.\\n    /// The group name is derived from the contract name.\\n    function stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);\\n\\n    /// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.\\n    function stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);\\n\\n    /// Stores a value to an address' storage slot.\\n    function store(address target, bytes32 slot, bytes32 value) external;\\n\\n    /// Fetches the given transaction from the active fork and executes it on the current state.\\n    function transact(bytes32 txHash) external;\\n\\n    /// Fetches the given transaction from the given fork and executes it on the current state.\\n    function transact(uint256 forkId, bytes32 txHash) external;\\n\\n    /// Sets `tx.gasprice`.\\n    function txGasPrice(uint256 newGasPrice) external;\\n\\n    /// Utility cheatcode to mark specific storage slot as warm, simulating a prior read.\\n    function warmSlot(address target, bytes32 slot) external;\\n\\n    /// Sets `block.timestamp`.\\n    function warp(uint256 newTimestamp) external;\\n\\n    /// `deleteSnapshot` is being deprecated in favor of `deleteStateSnapshot`. It will be removed in future versions.\\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\\n\\n    /// `deleteSnapshots` is being deprecated in favor of `deleteStateSnapshots`. It will be removed in future versions.\\n    function deleteSnapshots() external;\\n\\n    /// `revertToAndDelete` is being deprecated in favor of `revertToStateAndDelete`. It will be removed in future versions.\\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\\n\\n    /// `revertTo` is being deprecated in favor of `revertToState`. It will be removed in future versions.\\n    function revertTo(uint256 snapshotId) external returns (bool success);\\n\\n    /// `snapshot` is being deprecated in favor of `snapshotState`. It will be removed in future versions.\\n    function snapshot() external returns (uint256 snapshotId);\\n\\n    // ======== Testing ========\\n\\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\\n\\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\\n        external;\\n\\n    /// Expects a call to an address with the specified calldata.\\n    /// Calldata can either be a strict or a partial match.\\n    function expectCall(address callee, bytes calldata data) external;\\n\\n    /// Expects given number of calls to an address with the specified calldata.\\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\\n\\n    /// Expects a call to an address with the specified `msg.value` and calldata.\\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\\n\\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\\n\\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\\n\\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\\n\\n    /// Expects the deployment of the specified bytecode by the specified address using the CREATE opcode\\n    function expectCreate(bytes calldata bytecode, address deployer) external;\\n\\n    /// Expects the deployment of the specified bytecode by the specified address using the CREATE2 opcode\\n    function expectCreate2(bytes calldata bytecode, address deployer) external;\\n\\n    /// Prepare an expected anonymous log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\\n    function expectEmitAnonymous(bool checkTopic0, bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData)\\n        external;\\n\\n    /// Same as the previous method, but also checks supplied address against emitting contract.\\n    function expectEmitAnonymous(\\n        bool checkTopic0,\\n        bool checkTopic1,\\n        bool checkTopic2,\\n        bool checkTopic3,\\n        bool checkData,\\n        address emitter\\n    ) external;\\n\\n    /// Prepare an expected anonymous log with all topic and data checks enabled.\\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\\n    /// logs were emitted in the expected order with the expected topics and data.\\n    function expectEmitAnonymous() external;\\n\\n    /// Same as the previous method, but also checks supplied address against emitting contract.\\n    function expectEmitAnonymous(address emitter) external;\\n\\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\\n\\n    /// Same as the previous method, but also checks supplied address against emitting contract.\\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\\n        external;\\n\\n    /// Prepare an expected log with all topic and data checks enabled.\\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\\n    /// logs were emitted in the expected order with the expected topics and data.\\n    function expectEmit() external;\\n\\n    /// Same as the previous method, but also checks supplied address against emitting contract.\\n    function expectEmit(address emitter) external;\\n\\n    /// Expect a given number of logs with the provided topics.\\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, uint64 count) external;\\n\\n    /// Expect a given number of logs from a specific emitter with the provided topics.\\n    function expectEmit(\\n        bool checkTopic1,\\n        bool checkTopic2,\\n        bool checkTopic3,\\n        bool checkData,\\n        address emitter,\\n        uint64 count\\n    ) external;\\n\\n    /// Expect a given number of logs with all topic and data checks enabled.\\n    function expectEmit(uint64 count) external;\\n\\n    /// Expect a given number of logs from a specific emitter with all topic and data checks enabled.\\n    function expectEmit(address emitter, uint64 count) external;\\n\\n    /// Expects an error on next call that starts with the revert data.\\n    function expectPartialRevert(bytes4 revertData) external;\\n\\n    /// Expects an error on next call to reverter address, that starts with the revert data.\\n    function expectPartialRevert(bytes4 revertData, address reverter) external;\\n\\n    /// Expects an error on next call with any revert data.\\n    function expectRevert() external;\\n\\n    /// Expects an error on next call that exactly matches the revert data.\\n    function expectRevert(bytes4 revertData) external;\\n\\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address that match the revert data.\\n    function expectRevert(bytes4 revertData, address reverter, uint64 count) external;\\n\\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address that exactly match the revert data.\\n    function expectRevert(bytes calldata revertData, address reverter, uint64 count) external;\\n\\n    /// Expects an error on next call that exactly matches the revert data.\\n    function expectRevert(bytes calldata revertData) external;\\n\\n    /// Expects an error with any revert data on next call to reverter address.\\n    function expectRevert(address reverter) external;\\n\\n    /// Expects an error from reverter address on next call, with any revert data.\\n    function expectRevert(bytes4 revertData, address reverter) external;\\n\\n    /// Expects an error from reverter address on next call, that exactly matches the revert data.\\n    function expectRevert(bytes calldata revertData, address reverter) external;\\n\\n    /// Expects a `count` number of reverts from the upcoming calls with any revert data or reverter.\\n    function expectRevert(uint64 count) external;\\n\\n    /// Expects a `count` number of reverts from the upcoming calls that match the revert data.\\n    function expectRevert(bytes4 revertData, uint64 count) external;\\n\\n    /// Expects a `count` number of reverts from the upcoming calls that exactly match the revert data.\\n    function expectRevert(bytes calldata revertData, uint64 count) external;\\n\\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address.\\n    function expectRevert(address reverter, uint64 count) external;\\n\\n    /// Only allows memory writes to offsets [0x00, 0x60) \\u222a [min, max) in the current subcontext. If any other\\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\\n    function expectSafeMemory(uint64 min, uint64 max) external;\\n\\n    /// Only allows memory writes to offsets [0x00, 0x60) \\u222a [min, max) in the next created subcontext.\\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\\n    /// to the set.\\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\\n\\n    /// Marks a test as skipped. Must be called at the top level of a test.\\n    function skip(bool skipTest) external;\\n\\n    /// Marks a test as skipped with a reason. Must be called at the top level of a test.\\n    function skip(bool skipTest, string calldata reason) external;\\n\\n    /// Stops all safe memory expectation in the current subcontext.\\n    function stopExpectSafeMemory() external;\\n\\n    // ======== Utilities ========\\n\\n    /// Causes the next contract creation (via new) to fail and return its initcode in the returndata buffer.\\n    /// This allows type-safe access to the initcode payload that would be used for contract creation.\\n    /// Example usage:\\n    /// vm.interceptInitcode();\\n    /// bytes memory initcode;\\n    /// try new MyContract(param1, param2) { assert(false); }\\n    /// catch (bytes memory interceptedInitcode) { initcode = interceptedInitcode; }\\n    function interceptInitcode() external;\\n}\\n\",\"keccak256\":\"0xe2b159412b06b44a7f90972104300c587f308506d37d2143dd7e689e2eac6f01\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"lib/forge-std/src/StdStyle.sol":"StdStyle"},"evmVersion":"prague","libraries":{}},"sources":{"lib/forge-std/src/StdStyle.sol":{"keccak256":"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\nlibrary StdStyle {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string constant RED = \"\\u001b[91m\";\n    string constant GREEN = \"\\u001b[92m\";\n    string constant YELLOW = \"\\u001b[93m\";\n    string constant BLUE = \"\\u001b[94m\";\n    string constant MAGENTA = \"\\u001b[95m\";\n    string constant CYAN = \"\\u001b[96m\";\n    string constant BOLD = \"\\u001b[1m\";\n    string constant DIM = \"\\u001b[2m\";\n    string constant ITALIC = \"\\u001b[3m\";\n    string constant UNDERLINE = \"\\u001b[4m\";\n    string constant INVERSE = \"\\u001b[7m\";\n    string constant RESET = \"\\u001b[0m\";\n\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\n        return string(abi.encodePacked(style, self, RESET));\n    }\n\n    function red(string memory self) internal pure returns (string memory) {\n        return styleConcat(RED, self);\n    }\n\n    function red(uint256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(int256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(address self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(bool self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes(bytes memory self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function green(string memory self) internal pure returns (string memory) {\n        return styleConcat(GREEN, self);\n    }\n\n    function green(uint256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(int256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(address self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(bool self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function yellow(string memory self) internal pure returns (string memory) {\n        return styleConcat(YELLOW, self);\n    }\n\n    function yellow(uint256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(int256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(address self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(bool self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function blue(string memory self) internal pure returns (string memory) {\n        return styleConcat(BLUE, self);\n    }\n\n    function blue(uint256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(int256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(address self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(bool self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function magenta(string memory self) internal pure returns (string memory) {\n        return styleConcat(MAGENTA, self);\n    }\n\n    function magenta(uint256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(int256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(address self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(bool self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function cyan(string memory self) internal pure returns (string memory) {\n        return styleConcat(CYAN, self);\n    }\n\n    function cyan(uint256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(int256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(address self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(bool self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function bold(string memory self) internal pure returns (string memory) {\n        return styleConcat(BOLD, self);\n    }\n\n    function bold(uint256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(int256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(address self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(bool self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function dim(string memory self) internal pure returns (string memory) {\n        return styleConcat(DIM, self);\n    }\n\n    function dim(uint256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(int256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(address self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(bool self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function italic(string memory self) internal pure returns (string memory) {\n        return styleConcat(ITALIC, self);\n    }\n\n    function italic(uint256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(int256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(address self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(bool self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function underline(string memory self) internal pure returns (string memory) {\n        return styleConcat(UNDERLINE, self);\n    }\n\n    function underline(uint256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(int256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(address self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(bool self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function inverse(string memory self) internal pure returns (string memory) {\n        return styleConcat(INVERSE, self);\n    }\n\n    function inverse(uint256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(int256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(address self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(bool self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n}\n","license":"MIT"},"lib/forge-std/src/Vm.sol":{"keccak256":"0xe2b159412b06b44a7f90972104300c587f308506d37d2143dd7e689e2eac6f01","urls":[],"content":"// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\n/// these cheats in scripts.\ninterface VmSafe {\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\n    enum CallerMode {\n        // No caller modification is currently active.\n        None,\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\n        Broadcast,\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\n        RecurrentBroadcast,\n        // A one time prank triggered by a `vm.prank()` call is currently active.\n        Prank,\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\n        RecurrentPrank\n    }\n\n    /// The kind of account access that occurred.\n    enum AccountAccessKind {\n        // The account was called.\n        Call,\n        // The account was called via delegatecall.\n        DelegateCall,\n        // The account was called via callcode.\n        CallCode,\n        // The account was called via staticcall.\n        StaticCall,\n        // The account was created.\n        Create,\n        // The account was selfdestructed.\n        SelfDestruct,\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\n        Resume,\n        // The account's balance was read.\n        Balance,\n        // The account's codesize was read.\n        Extcodesize,\n        // The account's codehash was read.\n        Extcodehash,\n        // The account's code was copied.\n        Extcodecopy\n    }\n\n    /// Forge execution contexts.\n    enum ForgeContext {\n        // Test group execution context (test, coverage or snapshot).\n        TestGroup,\n        // `forge test` execution context.\n        Test,\n        // `forge coverage` execution context.\n        Coverage,\n        // `forge snapshot` execution context.\n        Snapshot,\n        // Script group execution context (dry run, broadcast or resume).\n        ScriptGroup,\n        // `forge script` execution context.\n        ScriptDryRun,\n        // `forge script --broadcast` execution context.\n        ScriptBroadcast,\n        // `forge script --resume` execution context.\n        ScriptResume,\n        // Unknown `forge` execution context.\n        Unknown\n    }\n\n    /// The transaction type (`txType`) of the broadcast.\n    enum BroadcastTxType {\n        // Represents a CALL broadcast tx.\n        Call,\n        // Represents a CREATE broadcast tx.\n        Create,\n        // Represents a CREATE2 broadcast tx.\n        Create2\n    }\n\n    /// An Ethereum log. Returned by `getRecordedLogs`.\n    struct Log {\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The address of the log's emitter.\n        address emitter;\n    }\n\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\n    struct Rpc {\n        // The alias of the RPC URL.\n        string key;\n        // The RPC URL.\n        string url;\n    }\n\n    /// An RPC log object. Returned by `eth_getLogs`.\n    struct EthGetLogs {\n        // The address of the log's emitter.\n        address emitter;\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The block hash.\n        bytes32 blockHash;\n        // The block number.\n        uint64 blockNumber;\n        // The transaction hash.\n        bytes32 transactionHash;\n        // The transaction index in the block.\n        uint64 transactionIndex;\n        // The log index.\n        uint256 logIndex;\n        // Whether the log was removed.\n        bool removed;\n    }\n\n    /// A single entry in a directory listing. Returned by `readDir`.\n    struct DirEntry {\n        // The error message, if any.\n        string errorMessage;\n        // The path of the entry.\n        string path;\n        // The depth of the entry.\n        uint64 depth;\n        // Whether the entry is a directory.\n        bool isDir;\n        // Whether the entry is a symlink.\n        bool isSymlink;\n    }\n\n    /// Metadata information about a file.\n    /// This structure is returned from the `fsMetadata` function and represents known\n    /// metadata about a file such as its permissions, size, modification\n    /// times, etc.\n    struct FsMetadata {\n        // True if this metadata is for a directory.\n        bool isDir;\n        // True if this metadata is for a symlink.\n        bool isSymlink;\n        // The size of the file, in bytes, this metadata is for.\n        uint256 length;\n        // True if this metadata is for a readonly (unwritable) file.\n        bool readOnly;\n        // The last modification time listed in this metadata.\n        uint256 modified;\n        // The last access time of this metadata.\n        uint256 accessed;\n        // The creation time listed in this metadata.\n        uint256 created;\n    }\n\n    /// A wallet with a public and private key.\n    struct Wallet {\n        // The wallet's address.\n        address addr;\n        // The wallet's public key `X`.\n        uint256 publicKeyX;\n        // The wallet's public key `Y`.\n        uint256 publicKeyY;\n        // The wallet's private key.\n        uint256 privateKey;\n    }\n\n    /// The result of a `tryFfi` call.\n    struct FfiResult {\n        // The exit code of the call.\n        int32 exitCode;\n        // The optionally hex-decoded `stdout` data.\n        bytes stdout;\n        // The `stderr` data.\n        bytes stderr;\n    }\n\n    /// Information on the chain and fork.\n    struct ChainInfo {\n        // The fork identifier. Set to zero if no fork is active.\n        uint256 forkId;\n        // The chain ID of the current fork.\n        uint256 chainId;\n    }\n\n    /// Information about a blockchain.\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        string rpcUrl;\n    }\n\n    /// The result of a `stopAndReturnStateDiff` call.\n    struct AccountAccess {\n        // The chain and fork the access occurred.\n        ChainInfo chainInfo;\n        // The kind of account access that determines what the account is.\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n        // If kind is Create, then the account is the newly created account.\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\n        // If kind is a Resume, then account represents a account context that has resumed.\n        AccountAccessKind kind;\n        // The account that was accessed.\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\n        address account;\n        // What accessed the account.\n        address accessor;\n        // If the account was initialized or empty prior to the access.\n        // An account is considered initialized if it has code, a\n        // non-zero nonce, or a non-zero balance.\n        bool initialized;\n        // The previous balance of the accessed account.\n        uint256 oldBalance;\n        // The potential new balance of the accessed account.\n        // That is, all balance changes are recorded here, even if reverts occurred.\n        uint256 newBalance;\n        // Code of the account deployed by CREATE.\n        bytes deployedCode;\n        // Value passed along with the account access\n        uint256 value;\n        // Input data provided to the CREATE or CALL\n        bytes data;\n        // If this access reverted in either the current or parent context.\n        bool reverted;\n        // An ordered list of storage accesses made during an account access operation.\n        StorageAccess[] storageAccesses;\n        // Call depth traversed during the recording of state differences\n        uint64 depth;\n    }\n\n    /// The storage accessed during an `AccountAccess`.\n    struct StorageAccess {\n        // The account whose storage was accessed.\n        address account;\n        // The slot that was accessed.\n        bytes32 slot;\n        // If the access was a write.\n        bool isWrite;\n        // The previous value of the slot.\n        bytes32 previousValue;\n        // The new value of the slot.\n        bytes32 newValue;\n        // If the access was reverted.\n        bool reverted;\n    }\n\n    /// Gas used. Returned by `lastCallGas`.\n    struct Gas {\n        // The gas limit of the call.\n        uint64 gasLimit;\n        // The total gas used.\n        uint64 gasTotalUsed;\n        // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>\n        uint64 gasMemoryUsed;\n        // The amount of gas refunded.\n        int64 gasRefunded;\n        // The amount of gas remaining.\n        uint64 gasRemaining;\n    }\n\n    /// The result of the `stopDebugTraceRecording` call\n    struct DebugStep {\n        // The stack before executing the step of the run.\n        // stack\\[0\\] represents the top of the stack.\n        // and only stack data relevant to the opcode execution is contained.\n        uint256[] stack;\n        // The memory input data before executing the step of the run.\n        // only input data relevant to the opcode execution is contained.\n        // e.g. for MLOAD, it will have memory\\[offset:offset+32\\] copied here.\n        // the offset value can be get by the stack data.\n        bytes memoryInput;\n        // The opcode that was accessed.\n        uint8 opcode;\n        // The call depth of the step.\n        uint64 depth;\n        // Whether the call end up with out of gas error.\n        bool isOutOfGas;\n        // The contract address where the opcode is running\n        address contractAddr;\n    }\n\n    /// Represents a transaction's broadcast details.\n    struct BroadcastTxSummary {\n        // The hash of the transaction that was broadcasted\n        bytes32 txHash;\n        // Represent the type of transaction among CALL, CREATE, CREATE2\n        BroadcastTxType txType;\n        // The address of the contract that was called or created.\n        // This is address of the contract that is created if the txType is CREATE or CREATE2.\n        address contractAddress;\n        // The block number the transaction landed in.\n        uint64 blockNumber;\n        // Status of the transaction, retrieved from the transaction receipt.\n        bool success;\n    }\n\n    /// Holds a signed EIP-7702 authorization for an authority account to delegate to an implementation.\n    struct SignedDelegation {\n        // The y-parity of the recovered secp256k1 signature (0 or 1).\n        uint8 v;\n        // First 32 bytes of the signature.\n        bytes32 r;\n        // Second 32 bytes of the signature.\n        bytes32 s;\n        // The current nonce of the authority account at signing time.\n        // Used to ensure signature can't be replayed after account nonce changes.\n        uint64 nonce;\n        // Address of the contract implementation that will be delegated to.\n        // Gets encoded into delegation code: 0xef0100 || implementation.\n        address implementation;\n    }\n\n    /// Represents a \"potential\" revert reason from a single subsequent call when using `vm.assumeNoReverts`.\n    /// Reverts that match will result in a FOUNDRY::ASSUME rejection, whereas unmatched reverts will be surfaced\n    /// as normal.\n    struct PotentialRevert {\n        // The allowed origin of the revert opcode; address(0) allows reverts from any address\n        address reverter;\n        // When true, only matches on the beginning of the revert data, otherwise, matches on entire revert data\n        bool partialMatch;\n        // The data to use to match encountered reverts\n        bytes revertData;\n    }\n\n    /// An EIP-2930 access list item.\n    struct AccessListItem {\n        // The address to be added in access list.\n        address target;\n        // The storage keys to be added in access list.\n        bytes32[] storageKeys;\n    }\n\n    // ======== Crypto ========\n\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key and returns the wallet.\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derives secp256r1 public key from the provided `privateKey`.\n    function publicKeyP256(uint256 privateKey) external pure returns (uint256 publicKeyX, uint256 publicKeyY);\n\n    /// Adds a private key to the local forge wallet and returns the address.\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n\n    /// Derive a set number of wallets from a mnemonic at the derivation path `m/44'/60'/0'/0/{0..count}`.\n    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.\n    function rememberKeys(string calldata mnemonic, string calldata derivationPath, uint32 count)\n        external\n        returns (address[] memory keyAddrs);\n\n    /// Derive a set number of wallets from a mnemonic in the specified language at the derivation path `m/44'/60'/0'/0/{0..count}`.\n    /// The respective private keys are saved to the local forge wallet for later use and their addresses are returned.\n    function rememberKeys(\n        string calldata mnemonic,\n        string calldata derivationPath,\n        string calldata language,\n        uint32 count\n    ) external returns (address[] memory keyAddrs);\n\n    /// Signs data with a `Wallet`.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    function signCompact(Wallet calldata wallet, bytes32 digest) external returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    function signCompact(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function signCompact(bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the\n    /// signature's `s` value, and the recovery id `v` in a single bytes32.\n    /// This format reduces the signature size from 65 to 64 bytes.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function signCompact(address signer, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);\n\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\n    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);\n\n    /// Signs data with a `Wallet`.\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// If `--sender` is provided, the signer with provided address is used, otherwise,\n    /// if exactly one signer is provided to the script, that signer is used.\n    /// Raises error if signer passed through `--sender` does not match any unlocked signers or\n    /// if `--sender` is not provided and not exactly one signer is passed to the script.\n    function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Signs `digest` with signer provided to script using the secp256k1 curve.\n    /// Raises error if none of the signers passed into the script have provided address.\n    function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    // ======== Environment ========\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and returns true if it exists, else returns false.\n    function envExists(string calldata name) external view returns (bool result);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\n        external\n        view\n        returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\n        external\n        view\n        returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\n        external\n        view\n        returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\n        external\n        view\n        returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, address defaultValue) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\n        external\n        view\n        returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\n        external\n        view\n        returns (uint256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\n        external\n        view\n        returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\n\n    /// Returns true if `forge` command was executed in given context.\n    function isContext(ForgeContext context) external view returns (bool result);\n\n    /// Sets environment variables.\n    function setEnv(string calldata name, string calldata value) external;\n\n    // ======== EVM ========\n\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n\n    /// Gets the address for a given private key.\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n\n    /// Gets all the logs according to specified filter.\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\n        external\n        returns (EthGetLogs[] memory logs);\n\n    /// Gets the current `block.blobbasefee`.\n    /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlobBaseFee() external view returns (uint256 blobBaseFee);\n\n    /// Gets the current `block.number`.\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockNumber() external view returns (uint256 height);\n\n    /// Gets the current `block.timestamp`.\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockTimestamp() external view returns (uint256 timestamp);\n\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\n        external\n        returns (bool found, bytes32 key, bytes32 parent);\n\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\n\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\n\n    /// Gets the nonce of an account.\n    function getNonce(address account) external view returns (uint64 nonce);\n\n    /// Get the nonce of a `Wallet`.\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\n\n    /// Gets the RLP encoded block header for a given block number.\n    /// Returns the block header in the same format as `cast block <block_number> --raw`.\n    function getRawBlockHeader(uint256 blockNumber) external view returns (bytes memory rlpHeader);\n\n    /// Gets all the recorded logs.\n    function getRecordedLogs() external returns (Log[] memory logs);\n\n    /// Returns state diffs from current `vm.startStateDiffRecording` session.\n    function getStateDiff() external view returns (string memory diff);\n\n    /// Returns state diffs from current `vm.startStateDiffRecording` session, in json format.\n    function getStateDiffJson() external view returns (string memory diff);\n\n    /// Gets the gas used in the last call from the callee perspective.\n    function lastCallGas() external view returns (Gas memory gas);\n\n    /// Loads a storage slot from an address.\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n\n    /// Records all storage reads and writes. Use `accesses` to get the recorded data.\n    /// Subsequent calls to `record` will clear the previous data.\n    function record() external;\n\n    /// Record all the transaction logs.\n    function recordLogs() external;\n\n    /// Reset gas metering (i.e. gas usage is set to gas limit).\n    function resetGasMetering() external;\n\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\n\n    /// Performs an Ethereum JSON-RPC request to the given endpoint.\n    function rpc(string calldata urlOrAlias, string calldata method, string calldata params)\n        external\n        returns (bytes memory data);\n\n    /// Records the debug trace during the run.\n    function startDebugTraceRecording() external;\n\n    /// Starts recording all map SSTOREs for later retrieval.\n    function startMappingRecording() external;\n\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\n    /// along with the context of the calls\n    function startStateDiffRecording() external;\n\n    /// Stop debug trace recording and returns the recorded debug trace.\n    function stopAndReturnDebugTraceRecording() external returns (DebugStep[] memory step);\n\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\n\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\n    function stopMappingRecording() external;\n\n    /// Stops recording storage reads and writes.\n    function stopRecord() external;\n\n    // ======== Filesystem ========\n\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    /// `path` is relative to the project root.\n    function closeFile(string calldata path) external;\n\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n    /// Both `from` and `to` are relative to the project root.\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\n\n    /// Creates a new, empty directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - User lacks permissions to modify `path`.\n    /// - A parent of the given path doesn't exist and `recursive` is false.\n    /// - `path` already exists and `recursive` is false.\n    /// `path` is relative to the project root.\n    function createDir(string calldata path, bool recursive) external;\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function deployCode(string calldata artifactPath) external returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs)\n        external\n        returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts `msg.value`.\n    function deployCode(string calldata artifactPath, uint256 value) external returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments and `msg.value`.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, uint256 value)\n        external\n        returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function deployCode(string calldata artifactPath, bytes32 salt) external returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, bytes32 salt)\n        external\n        returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts `msg.value`.\n    function deployCode(string calldata artifactPath, uint256 value, bytes32 salt)\n        external\n        returns (address deployedAddress);\n\n    /// Deploys a contract from an artifact file, using the CREATE2 salt. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    /// Additionally accepts abi-encoded constructor arguments and `msg.value`.\n    function deployCode(string calldata artifactPath, bytes calldata constructorArgs, uint256 value, bytes32 salt)\n        external\n        returns (address deployedAddress);\n\n    /// Returns true if the given path points to an existing entity, else returns false.\n    function exists(string calldata path) external view returns (bool result);\n\n    /// Performs a foreign function call via the terminal.\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n\n    /// Given a path, query the file system to get information about a file, directory, etc.\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\n\n    /// Gets the artifact path from code (aka. creation code).\n    function getArtifactPathByCode(bytes calldata code) external view returns (string memory path);\n\n    /// Gets the artifact path from deployed code (aka. runtime code).\n    function getArtifactPathByDeployedCode(bytes calldata deployedCode) external view returns (string memory path);\n\n    /// Returns the most recent broadcast for the given contract on `chainId` matching `txType`.\n    /// For example:\n    /// The most recent deployment can be fetched by passing `txType` as `CREATE` or `CREATE2`.\n    /// The most recent call can be fetched by passing `txType` as `CALL`.\n    function getBroadcast(string calldata contractName, uint64 chainId, BroadcastTxType txType)\n        external\n        view\n        returns (BroadcastTxSummary memory);\n\n    /// Returns all broadcasts for the given contract on `chainId` with the specified `txType`.\n    /// Sorted such that the most recent broadcast is the first element, and the oldest is the last. i.e descending order of BroadcastTxSummary.blockNumber.\n    function getBroadcasts(string calldata contractName, uint64 chainId, BroadcastTxType txType)\n        external\n        view\n        returns (BroadcastTxSummary[] memory);\n\n    /// Returns all broadcasts for the given contract on `chainId`.\n    /// Sorted such that the most recent broadcast is the first element, and the oldest is the last. i.e descending order of BroadcastTxSummary.blockNumber.\n    function getBroadcasts(string calldata contractName, uint64 chainId)\n        external\n        view\n        returns (BroadcastTxSummary[] memory);\n\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\n\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the\n    /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\n\n    /// Returns the most recent deployment for the current `chainId`.\n    function getDeployment(string calldata contractName) external view returns (address deployedAddress);\n\n    /// Returns the most recent deployment for the given contract on `chainId`\n    function getDeployment(string calldata contractName, uint64 chainId)\n        external\n        view\n        returns (address deployedAddress);\n\n    /// Returns all deployments for the given contract on `chainId`\n    /// Sorted in descending order of deployment time i.e descending order of BroadcastTxSummary.blockNumber.\n    /// The most recent deployment is the first element, and the oldest is the last.\n    function getDeployments(string calldata contractName, uint64 chainId)\n        external\n        view\n        returns (address[] memory deployedAddresses);\n\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\n    function isDir(string calldata path) external view returns (bool result);\n\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\n    function isFile(string calldata path) external view returns (bool result);\n\n    /// Get the path of the current project root.\n    function projectRoot() external view returns (string memory path);\n\n    /// Prompts the user for a string value in the terminal.\n    function prompt(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for an address in the terminal.\n    function promptAddress(string calldata promptText) external returns (address);\n\n    /// Prompts the user for a hidden string value in the terminal.\n    function promptSecret(string calldata promptText) external returns (string memory input);\n\n    /// Prompts the user for hidden uint256 in the terminal (usually pk).\n    function promptSecretUint(string calldata promptText) external returns (uint256);\n\n    /// Prompts the user for uint256 in the terminal.\n    function promptUint(string calldata promptText) external returns (uint256);\n\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n    /// Follows symbolic links if `followLinks` is true.\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\n        external\n        view\n        returns (DirEntry[] memory entries);\n\n    /// Reads the entire content of file to string. `path` is relative to the project root.\n    function readFile(string calldata path) external view returns (string memory data);\n\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n\n    /// Reads next line of file to string.\n    function readLine(string calldata path) external view returns (string memory line);\n\n    /// Reads a symbolic link, returning the path that the link points to.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` is not a symbolic link.\n    /// - `path` does not exist.\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\n\n    /// Removes a directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` doesn't exist.\n    /// - `path` isn't a directory.\n    /// - User lacks permissions to modify `path`.\n    /// - The directory is not empty and `recursive` is false.\n    /// `path` is relative to the project root.\n    function removeDir(string calldata path, bool recursive) external;\n\n    /// Removes a file from the filesystem.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` points to a directory.\n    /// - The file doesn't exist.\n    /// - The user lacks permissions to remove the file.\n    /// `path` is relative to the project root.\n    function removeFile(string calldata path) external;\n\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\n\n    /// Returns the time since unix epoch in milliseconds.\n    function unixTime() external view returns (uint256 milliseconds);\n\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFile(string calldata path, string calldata data) external;\n\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n\n    /// Writes line to file, creating a file if it does not exist.\n    /// `path` is relative to the project root.\n    function writeLine(string calldata path, string calldata data) external;\n\n    // ======== JSON ========\n\n    /// Checks if `key` exists in a JSON object.\n    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\n    function parseJsonAddressArray(string calldata json, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\n    function parseJsonBytes32Array(string calldata json, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a JSON object.\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to type array corresponding to `typeDescription`.\n    function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data and coerces it to type corresponding to `typeDescription`.\n    function parseJsonType(string calldata json, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to type corresponding to `typeDescription`.\n    function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a JSON object.\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a JSON object at `key`.\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\n    /// Returns the stringified version of the specific JSON file up to that moment.\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeJsonType(string calldata typeDescription, bytes calldata value)\n        external\n        pure\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeJsonType(\n        string calldata objectKey,\n        string calldata valueKey,\n        string calldata typeDescription,\n        bytes calldata value\n    ) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    function writeJson(string calldata json, string calldata path) external;\n\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n\n    /// Checks if `key` exists in a JSON object\n    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\n\n    // ======== Scripting ========\n\n    /// Attach an EIP-4844 blob to the next call\n    function attachBlob(bytes calldata blob) external;\n\n    /// Designate the next call as an EIP-7702 transaction\n    function attachDelegation(SignedDelegation calldata signedDelegation) external;\n\n    /// Designate the next call as an EIP-7702 transaction, with optional cross-chain validity.\n    function attachDelegation(SignedDelegation calldata signedDelegation, bool crossChain) external;\n\n    /// Takes a signed transaction and broadcasts it to the network.\n    function broadcastRawTransaction(bytes calldata data) external;\n\n    /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function broadcast() external;\n\n    /// Has the next call (at this call depth only) create a transaction with the address provided\n    /// as the sender that can later be signed and sent onchain.\n    function broadcast(address signer) external;\n\n    /// Has the next call (at this call depth only) create a transaction with the private key\n    /// provided as the sender that can later be signed and sent onchain.\n    function broadcast(uint256 privateKey) external;\n\n    /// Returns addresses of available unlocked wallets in the script environment.\n    function getWallets() external returns (address[] memory wallets);\n\n    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction\n    function signAndAttachDelegation(address implementation, uint256 privateKey)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction for specific nonce\n    function signAndAttachDelegation(address implementation, uint256 privateKey, uint64 nonce)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction, with optional cross-chain validity.\n    function signAndAttachDelegation(address implementation, uint256 privateKey, bool crossChain)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Sign an EIP-7702 authorization for delegation\n    function signDelegation(address implementation, uint256 privateKey)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Sign an EIP-7702 authorization for delegation for specific nonce\n    function signDelegation(address implementation, uint256 privateKey, uint64 nonce)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Sign an EIP-7702 authorization for delegation, with optional cross-chain validity.\n    function signDelegation(address implementation, uint256 privateKey, bool crossChain)\n        external\n        returns (SignedDelegation memory signedDelegation);\n\n    /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.\n    /// Broadcasting address is determined by checking the following in order:\n    /// 1. If `--sender` argument was provided, that address is used.\n    /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n    /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.\n    function startBroadcast() external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(address signer) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(uint256 privateKey) external;\n\n    /// Stops collecting onchain transactions.\n    function stopBroadcast() external;\n\n    // ======== String ========\n\n    /// Returns true if `search` is found in `subject`, false otherwise.\n    function contains(string calldata subject, string calldata search) external returns (bool result);\n\n    /// Returns the index of the first occurrence of a `key` in an `input` string.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.\n    /// Returns 0 in case of an empty `key`.\n    function indexOf(string calldata input, string calldata key) external pure returns (uint256);\n\n    /// Parses the given `string` into an `address`.\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n\n    /// Parses the given `string` into a `bool`.\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n\n    /// Parses the given `string` into `bytes`.\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n\n    /// Parses the given `string` into a `bytes32`.\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n\n    /// Parses the given `string` into a `int256`.\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n\n    /// Parses the given `string` into a `uint256`.\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n\n    /// Replaces occurrences of `from` in the given `string` with `to`.\n    function replace(string calldata input, string calldata from, string calldata to)\n        external\n        pure\n        returns (string memory output);\n\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\n    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);\n\n    /// Converts the given `string` value to Lowercase.\n    function toLowercase(string calldata input) external pure returns (string memory output);\n\n    /// Converts the given value to a `string`.\n    function toString(address value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given `string` value to Uppercase.\n    function toUppercase(string calldata input) external pure returns (string memory output);\n\n    /// Trims leading and trailing whitespace from the given `string` value.\n    function trim(string calldata input) external pure returns (string memory output);\n\n    // ======== Testing ========\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are equal.\n    function assertEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are equal.\n    function assertEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are equal.\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal.\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256 values are equal.\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal.\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal.\n    function assertEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal.\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are equal.\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal.\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal.\n    function assertEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are equal.\n    function assertEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are equal.\n    function assertEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is false.\n    function assertFalse(bool condition) external pure;\n\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\n    function assertFalse(bool condition, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    function assertGe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    function assertGe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    function assertGt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    function assertGt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    function assertLe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    function assertLe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    function assertLt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    function assertLt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are not equal.\n    function assertNotEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are not equal.\n    function assertNotEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are not equal.\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal.\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal.\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal.\n    function assertNotEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal.\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal.\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal.\n    function assertNotEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are not equal.\n    function assertNotEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are not equal.\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is true.\n    function assertTrue(bool condition) external pure;\n\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\n    function assertTrue(bool condition, string calldata error) external pure;\n\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n\n    /// Discard this run's fuzz inputs and generate new ones if next call reverted.\n    function assumeNoRevert() external pure;\n\n    /// Discard this run's fuzz inputs and generate new ones if next call reverts with the potential revert parameters.\n    function assumeNoRevert(PotentialRevert calldata potentialRevert) external pure;\n\n    /// Discard this run's fuzz inputs and generate new ones if next call reverts with the any of the potential revert parameters.\n    function assumeNoRevert(PotentialRevert[] calldata potentialReverts) external pure;\n\n    /// Writes a breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char) external pure;\n\n    /// Writes a conditional breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char, bool value) external pure;\n\n    /// Returns true if the current Foundry version is greater than or equal to the given version.\n    /// The given version string must be in the format `major.minor.patch`.\n    /// This is equivalent to `foundryVersionCmp(version) >= 0`.\n    function foundryVersionAtLeast(string calldata version) external view returns (bool);\n\n    /// Compares the current Foundry version with the given version string.\n    /// The given version string must be in the format `major.minor.patch`.\n    /// Returns:\n    /// -1 if current Foundry version is less than the given version\n    /// 0 if current Foundry version equals the given version\n    /// 1 if current Foundry version is greater than the given version\n    /// This result can then be used with a comparison operator against `0`.\n    /// For example, to check if the current Foundry version is greater than or equal to `1.0.0`:\n    /// `if (foundryVersionCmp(\"1.0.0\") >= 0) { ... }`\n    function foundryVersionCmp(string calldata version) external view returns (int256);\n\n    /// Returns a Chain struct for specific alias\n    function getChain(string calldata chainAlias) external view returns (Chain memory chain);\n\n    /// Returns a Chain struct for specific chainId\n    function getChain(uint256 chainId) external view returns (Chain memory chain);\n\n    /// Returns the Foundry version.\n    /// Format: <cargo_version>-<tag>+<git_sha_short>.<unix_build_timestamp>.<profile>\n    /// Sample output: 0.3.0-nightly+3cb96bde9b.1737036656.debug\n    /// Note: Build timestamps may vary slightly across platforms due to separate CI jobs.\n    /// For reliable version comparisons, use UNIX format (e.g., >= 1700000000)\n    /// to compare timestamps while ignoring minor time differences.\n    function getFoundryVersion() external view returns (string memory version);\n\n    /// Returns the RPC url for the given alias.\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n\n    /// Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\n    function rpcUrls() external view returns (string[2][] memory urls);\n\n    /// Suspends execution of the main thread for `duration` milliseconds.\n    function sleep(uint256 duration) external;\n\n    // ======== Toml ========\n\n    /// Checks if `key` exists in a TOML table.\n    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address`.\n    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address[]`.\n    function parseTomlAddressArray(string calldata toml, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool`.\n    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.\n    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes`.\n    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.\n    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.\n    function parseTomlBytes32Array(string calldata toml, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.\n    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256`.\n    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.\n    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a TOML table.\n    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string`.\n    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string[]`.\n    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to type array corresponding to `typeDescription`.\n    function parseTomlTypeArray(string calldata toml, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data and coerces it to type corresponding to `typeDescription`.\n    function parseTomlType(string calldata toml, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to type corresponding to `typeDescription`.\n    function parseTomlType(string calldata toml, string calldata key, string calldata typeDescription)\n        external\n        pure\n        returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256`.\n    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.\n    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a TOML table.\n    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a TOML table at `key`.\n    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.\n    function writeToml(string calldata json, string calldata path) external;\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.\n    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Utilities ========\n\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\n        external\n        pure\n        returns (address);\n\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\n\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\n\n    /// Utility cheatcode to copy storage of `from` contract to another `to` contract.\n    function copyStorage(address from, address to) external;\n\n    /// Generates the struct hash of the canonical EIP-712 type representation and its abi-encoded data.\n    /// Supports 2 different inputs:\n    /// 1. Name of the type (i.e. \"PermitSingle\"):\n    /// * requires previous binding generation with `forge bind-json`.\n    /// * bindings will be retrieved from the path configured in `foundry.toml`.\n    /// 2. String representation of the type (i.e. \"Foo(Bar bar) Bar(uint256 baz)\").\n    /// * Note: the cheatcode will use the canonical type even if the input is malformated\n    /// with the wrong order of elements or with extra whitespaces.\n    function eip712HashStruct(string calldata typeNameOrDefinition, bytes calldata abiEncodedData)\n        external\n        pure\n        returns (bytes32 typeHash);\n\n    /// Generates the struct hash of the canonical EIP-712 type representation and its abi-encoded data.\n    /// Requires previous binding generation with `forge bind-json`.\n    /// Params:\n    /// * `bindingsPath`: path where the output of `forge bind-json` is stored.\n    /// * `typeName`: Name of the type (i.e. \"PermitSingle\").\n    /// * `abiEncodedData`: ABI-encoded data for the struct that is being hashed.\n    function eip712HashStruct(string calldata bindingsPath, string calldata typeName, bytes calldata abiEncodedData)\n        external\n        pure\n        returns (bytes32 typeHash);\n\n    /// Generates the hash of the canonical EIP-712 type representation.\n    /// Supports 2 different inputs:\n    /// 1. Name of the type (i.e. \"Transaction\"):\n    /// * requires previous binding generation with `forge bind-json`.\n    /// * bindings will be retrieved from the path configured in `foundry.toml`.\n    /// 2. String representation of the type (i.e. \"Foo(Bar bar) Bar(uint256 baz)\").\n    /// * Note: the cheatcode will output the canonical type even if the input is malformated\n    /// with the wrong order of elements or with extra whitespaces.\n    function eip712HashType(string calldata typeNameOrDefinition) external pure returns (bytes32 typeHash);\n\n    /// Generates the hash of the canonical EIP-712 type representation.\n    /// Requires previous binding generation with `forge bind-json`.\n    /// Params:\n    /// * `bindingsPath`: path where the output of `forge bind-json` is stored.\n    /// * `typeName`: Name of the type (i.e. \"Transaction\").\n    function eip712HashType(string calldata bindingsPath, string calldata typeName)\n        external\n        pure\n        returns (bytes32 typeHash);\n\n    /// Generates a ready-to-sign digest of human-readable typed data following the EIP-712 standard.\n    function eip712HashTypedData(string calldata jsonData) external pure returns (bytes32 digest);\n\n    /// Returns ENS namehash for provided string.\n    function ensNamehash(string calldata name) external pure returns (bytes32);\n\n    /// Gets the label for the specified address.\n    function getLabel(address account) external view returns (string memory currentLabel);\n\n    /// Labels an address in call traces.\n    function label(address account, string calldata newLabel) external;\n\n    /// Pauses collection of call traces. Useful in cases when you want to skip tracing of\n    /// complex calls which are not useful for debugging.\n    function pauseTracing() external view;\n\n    /// Returns a random `address`.\n    function randomAddress() external view returns (address);\n\n    /// Returns a random `bool`.\n    function randomBool() external view returns (bool);\n\n    /// Returns a random byte array value of the given length.\n    function randomBytes(uint256 len) external view returns (bytes memory);\n\n    /// Returns a random fixed-size byte array of length 4.\n    function randomBytes4() external view returns (bytes4);\n\n    /// Returns a random fixed-size byte array of length 8.\n    function randomBytes8() external view returns (bytes8);\n\n    /// Returns a random `int256` value.\n    function randomInt() external view returns (int256);\n\n    /// Returns a random `int256` value of given bits.\n    function randomInt(uint256 bits) external view returns (int256);\n\n    /// Returns a random uint256 value.\n    function randomUint() external view returns (uint256);\n\n    /// Returns random uint256 value between the provided range (=min..=max).\n    function randomUint(uint256 min, uint256 max) external view returns (uint256);\n\n    /// Returns a random `uint256` value of given bits.\n    function randomUint(uint256 bits) external view returns (uint256);\n\n    /// Unpauses collection of call traces.\n    function resumeTracing() external view;\n\n    /// Utility cheatcode to set arbitrary storage for given target address.\n    function setArbitraryStorage(address target) external;\n\n    /// Utility cheatcode to set arbitrary storage for given target address and overwrite\n    /// any storage slots that have been previously set.\n    function setArbitraryStorage(address target, bool overwrite) external;\n\n    /// Set RNG seed.\n    function setSeed(uint256 seed) external;\n\n    /// Randomly shuffles an array.\n    function shuffle(uint256[] calldata array) external returns (uint256[] memory);\n\n    /// Sorts an array in ascending order.\n    function sort(uint256[] calldata array) external returns (uint256[] memory);\n\n    /// Encodes a `bytes` value to a base64url string.\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64url string.\n    function toBase64URL(string calldata data) external pure returns (string memory);\n\n    /// Encodes a `bytes` value to a base64 string.\n    function toBase64(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64 string.\n    function toBase64(string calldata data) external pure returns (string memory);\n}\n\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\ninterface Vm is VmSafe {\n    // ======== EVM ========\n\n    /// Utility cheatcode to set an EIP-2930 access list for all subsequent transactions.\n    function accessList(AccessListItem[] calldata access) external;\n\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n\n    /// In forking mode, explicitly grant the given address cheatcode access.\n    function allowCheatcodes(address account) external;\n\n    /// Sets `block.blobbasefee`\n    function blobBaseFee(uint256 newBlobBaseFee) external;\n\n    /// Sets the blobhashes in the transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function blobhashes(bytes32[] calldata hashes) external;\n\n    /// Sets `block.chainid`.\n    function chainId(uint256 newChainId) external;\n\n    /// Clears all mocked calls.\n    function clearMockedCalls() external;\n\n    /// Clones a source account code, state, balance and nonce to a target account and updates in-memory EVM state.\n    function cloneAccount(address source, address target) external;\n\n    /// Sets `block.coinbase`.\n    function coinbase(address newCoinbase) external;\n\n    /// Marks the slots of an account and the account address as cold.\n    function cool(address target) external;\n\n    /// Utility cheatcode to mark specific storage slot as cold, simulating no prior read.\n    function coolSlot(address target, bytes32 slot) external;\n\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Sets an address' balance.\n    function deal(address account, uint256 newBalance) external;\n\n    /// Removes the snapshot with the given ID created by `snapshot`.\n    /// Takes the snapshot ID to delete.\n    /// Returns `true` if the snapshot was successfully deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function deleteStateSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// Removes _all_ snapshots previously created by `snapshot`.\n    function deleteStateSnapshots() external;\n\n    /// Sets `block.difficulty`.\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\n    /// Reverts if used on unsupported EVM versions.\n    function difficulty(uint256 newDifficulty) external;\n\n    /// Dump a genesis JSON file's `allocs` to disk.\n    function dumpState(string calldata pathToStateJson) external;\n\n    /// Sets an address' code.\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n\n    /// Sets `block.basefee`.\n    function fee(uint256 newBasefee) external;\n\n    /// Gets the blockhashes from the current transaction.\n    /// Not available on EVM versions before Cancun.\n    /// If used on unsupported EVM versions it will revert.\n    function getBlobhashes() external view returns (bytes32[] memory hashes);\n\n    /// Returns true if the account is marked as persistent.\n    function isPersistent(address account) external view returns (bool persistent);\n\n    /// Load a genesis JSON file's `allocs` into the in-memory EVM state.\n    function loadAllocs(string calldata pathToAllocsJson) external;\n\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\n    function makePersistent(address account) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1, address account2) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address[] calldata accounts) external;\n\n    /// Reverts a call to an address with specified revert data.\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\n        external;\n\n    /// Reverts a call to an address with specified revert data.\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\n    function mockCallRevert(address callee, bytes4 data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\n    function mockCallRevert(address callee, uint256 msgValue, bytes4 data, bytes calldata revertData) external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\n    function mockCall(address callee, bytes4 data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    /// Overload to pass the function selector directly `token.approve.selector` instead of `abi.encodeWithSelector(token.approve.selector)`.\n    function mockCall(address callee, uint256 msgValue, bytes4 data, bytes calldata returnData) external;\n\n    /// Mocks multiple calls to an address, returning specified data for each call.\n    function mockCalls(address callee, bytes calldata data, bytes[] calldata returnData) external;\n\n    /// Mocks multiple calls to an address with a specific `msg.value`, returning specified data for each call.\n    function mockCalls(address callee, uint256 msgValue, bytes calldata data, bytes[] calldata returnData) external;\n\n    /// Whenever a call is made to `callee` with calldata `data`, this cheatcode instead calls\n    /// `target` with the same calldata. This functionality is similar to a delegate call made to\n    /// `target` contract from `callee`.\n    /// Can be used to substitute a call to a function with another implementation that captures\n    /// the primary logic of the original function but is easier to reason about.\n    /// If calldata is not a strict match then partial match by selector is attempted.\n    function mockFunction(address callee, address target, bytes calldata data) external;\n\n    /// Utility cheatcode to remove any EIP-2930 access list set by `accessList` cheatcode.\n    function noAccessList() external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address.\n    function prank(address msgSender) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin) external;\n\n    /// Sets the *next* delegate call's `msg.sender` to be the input address.\n    function prank(address msgSender, bool delegateCall) external;\n\n    /// Sets the *next* delegate call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin, bool delegateCall) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(bytes32 newPrevrandao) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(uint256 newPrevrandao) external;\n\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\n\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\n    function resetNonce(address account) external;\n\n    /// Revert the state of the EVM to a previous snapshot\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted.\n    /// Returns `false` if the snapshot does not exist.\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.\n    function revertToState(uint256 snapshotId) external returns (bool success);\n\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function revertToStateAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\n    function revokePersistent(address account) external;\n\n    /// See `revokePersistent(address)`.\n    function revokePersistent(address[] calldata accounts) external;\n\n    /// Sets `block.height`.\n    function roll(uint256 newHeight) external;\n\n    /// Updates the currently active fork to given block number\n    /// This is similar to `roll` but for the currently active fork.\n    function rollFork(uint256 blockNumber) external;\n\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\n    function rollFork(bytes32 txHash) external;\n\n    /// Updates the given fork to given block number.\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n\n    /// Set blockhash for the current block.\n    /// It only sets the blockhash for blocks where `block.number - 256 <= number < block.number`.\n    function setBlockhash(uint256 blockNumber, bytes32 blockHash) external;\n\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\n    function setNonce(address account, uint64 newNonce) external;\n\n    /// Sets the nonce of an account to an arbitrary value.\n    function setNonceUnsafe(address account, uint64 newNonce) external;\n\n    /// Snapshot capture the gas usage of the last call by name from the callee perspective.\n    function snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);\n\n    /// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.\n    function snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);\n\n    /// Snapshot the current state of the evm.\n    /// Returns the ID of the snapshot that was created.\n    /// To revert a snapshot use `revertToState`.\n    function snapshotState() external returns (uint256 snapshotId);\n\n    /// Snapshot capture an arbitrary numerical value by name.\n    /// The group name is derived from the contract name.\n    function snapshotValue(string calldata name, uint256 value) external;\n\n    /// Snapshot capture an arbitrary numerical value by name in a group.\n    function snapshotValue(string calldata group, string calldata name, uint256 value) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin) external;\n\n    /// Sets all subsequent delegate calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender, bool delegateCall) external;\n\n    /// Sets all subsequent delegate calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin, bool delegateCall) external;\n\n    /// Start a snapshot capture of the current gas usage by name.\n    /// The group name is derived from the contract name.\n    function startSnapshotGas(string calldata name) external;\n\n    /// Start a snapshot capture of the current gas usage by name in a group.\n    function startSnapshotGas(string calldata group, string calldata name) external;\n\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\n    function stopPrank() external;\n\n    /// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.\n    function stopSnapshotGas() external returns (uint256 gasUsed);\n\n    /// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.\n    /// The group name is derived from the contract name.\n    function stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);\n\n    /// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.\n    function stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);\n\n    /// Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n\n    /// Fetches the given transaction from the active fork and executes it on the current state.\n    function transact(bytes32 txHash) external;\n\n    /// Fetches the given transaction from the given fork and executes it on the current state.\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    /// Sets `tx.gasprice`.\n    function txGasPrice(uint256 newGasPrice) external;\n\n    /// Utility cheatcode to mark specific storage slot as warm, simulating a prior read.\n    function warmSlot(address target, bytes32 slot) external;\n\n    /// Sets `block.timestamp`.\n    function warp(uint256 newTimestamp) external;\n\n    /// `deleteSnapshot` is being deprecated in favor of `deleteStateSnapshot`. It will be removed in future versions.\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// `deleteSnapshots` is being deprecated in favor of `deleteStateSnapshots`. It will be removed in future versions.\n    function deleteSnapshots() external;\n\n    /// `revertToAndDelete` is being deprecated in favor of `revertToStateAndDelete`. It will be removed in future versions.\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// `revertTo` is being deprecated in favor of `revertToState`. It will be removed in future versions.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n\n    /// `snapshot` is being deprecated in favor of `snapshotState`. It will be removed in future versions.\n    function snapshot() external returns (uint256 snapshotId);\n\n    // ======== Testing ========\n\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\n\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\n        external;\n\n    /// Expects a call to an address with the specified calldata.\n    /// Calldata can either be a strict or a partial match.\n    function expectCall(address callee, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified calldata.\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\n\n    /// Expects a call to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\n\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\n\n    /// Expects the deployment of the specified bytecode by the specified address using the CREATE opcode\n    function expectCreate(bytes calldata bytecode, address deployer) external;\n\n    /// Expects the deployment of the specified bytecode by the specified address using the CREATE2 opcode\n    function expectCreate2(bytes calldata bytecode, address deployer) external;\n\n    /// Prepare an expected anonymous log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmitAnonymous(bool checkTopic0, bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData)\n        external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmitAnonymous(\n        bool checkTopic0,\n        bool checkTopic1,\n        bool checkTopic2,\n        bool checkTopic3,\n        bool checkData,\n        address emitter\n    ) external;\n\n    /// Prepare an expected anonymous log with all topic and data checks enabled.\n    /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmitAnonymous() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmitAnonymous(address emitter) external;\n\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\n        external;\n\n    /// Prepare an expected log with all topic and data checks enabled.\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmit() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(address emitter) external;\n\n    /// Expect a given number of logs with the provided topics.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, uint64 count) external;\n\n    /// Expect a given number of logs from a specific emitter with the provided topics.\n    function expectEmit(\n        bool checkTopic1,\n        bool checkTopic2,\n        bool checkTopic3,\n        bool checkData,\n        address emitter,\n        uint64 count\n    ) external;\n\n    /// Expect a given number of logs with all topic and data checks enabled.\n    function expectEmit(uint64 count) external;\n\n    /// Expect a given number of logs from a specific emitter with all topic and data checks enabled.\n    function expectEmit(address emitter, uint64 count) external;\n\n    /// Expects an error on next call that starts with the revert data.\n    function expectPartialRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call to reverter address, that starts with the revert data.\n    function expectPartialRevert(bytes4 revertData, address reverter) external;\n\n    /// Expects an error on next call with any revert data.\n    function expectRevert() external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes4 revertData) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address that match the revert data.\n    function expectRevert(bytes4 revertData, address reverter, uint64 count) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address that exactly match the revert data.\n    function expectRevert(bytes calldata revertData, address reverter, uint64 count) external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData) external;\n\n    /// Expects an error with any revert data on next call to reverter address.\n    function expectRevert(address reverter) external;\n\n    /// Expects an error from reverter address on next call, with any revert data.\n    function expectRevert(bytes4 revertData, address reverter) external;\n\n    /// Expects an error from reverter address on next call, that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData, address reverter) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls with any revert data or reverter.\n    function expectRevert(uint64 count) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls that match the revert data.\n    function expectRevert(bytes4 revertData, uint64 count) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls that exactly match the revert data.\n    function expectRevert(bytes calldata revertData, uint64 count) external;\n\n    /// Expects a `count` number of reverts from the upcoming calls from the reverter address.\n    function expectRevert(address reverter, uint64 count) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\n    function expectSafeMemory(uint64 min, uint64 max) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\n    /// to the set.\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\n\n    /// Marks a test as skipped. Must be called at the top level of a test.\n    function skip(bool skipTest) external;\n\n    /// Marks a test as skipped with a reason. Must be called at the top level of a test.\n    function skip(bool skipTest, string calldata reason) external;\n\n    /// Stops all safe memory expectation in the current subcontext.\n    function stopExpectSafeMemory() external;\n\n    // ======== Utilities ========\n\n    /// Causes the next contract creation (via new) to fail and return its initcode in the returndata buffer.\n    /// This allows type-safe access to the initcode payload that would be used for contract creation.\n    /// Example usage:\n    /// vm.interceptInitcode();\n    /// bytes memory initcode;\n    /// try new MyContract(param1, param2) { assert(false); }\n    /// catch (bytes memory interceptedInitcode) { initcode = interceptedInitcode; }\n    function interceptInitcode() external;\n}\n","license":"MIT OR Apache-2.0"}},"version":1},"ast":{"absolutePath":"lib/forge-std/src/StdStyle.sol","id":8281,"exportedSymbols":{"StdStyle":[8280],"VmSafe":[13052]},"nodeType":"SourceUnit","src":"32:10430:8","nodes":[{"id":7071,"nodeType":"PragmaDirective","src":"32:32:8","nodes":[],"literals":["solidity",">=","0.4",".22","<","0.9",".0"]},{"id":7073,"nodeType":"ImportDirective","src":"66:32:8","nodes":[],"absolutePath":"lib/forge-std/src/Vm.sol","file":"./Vm.sol","nameLocation":"-1:-1:-1","scope":8281,"sourceUnit":14124,"symbolAliases":[{"foreign":{"id":7072,"name":"VmSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13052,"src":"74:6:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8280,"nodeType":"ContractDefinition","src":"100:10361:8","nodes":[{"id":7090,"nodeType":"VariableDeclaration","src":"123:92:8","nodes":[],"constant":true,"mutability":"constant","name":"vm","nameLocation":"147:2:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"},"typeName":{"id":7075,"nodeType":"UserDefinedTypeName","pathNode":{"id":7074,"name":"VmSafe","nameLocations":["123:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":13052,"src":"123:6:8"},"referencedDeclaration":13052,"src":"123:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"6865766d20636865617420636f6465","id":7084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"193:17:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d","typeString":"literal_string \"hevm cheat code\""},"value":"hevm cheat code"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d","typeString":"literal_string \"hevm cheat code\""}],"id":7083,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"183:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":7085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"183:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"175:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7081,"name":"uint256","nodeType":"ElementaryTypeName","src":"175:7:8","typeDescriptions":{}}},"id":7086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"175:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"167:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7079,"name":"uint160","nodeType":"ElementaryTypeName","src":"167:7:8","typeDescriptions":{}}},"id":7087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"167:46:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":7078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"159:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7077,"name":"address","nodeType":"ElementaryTypeName","src":"159:7:8","typeDescriptions":{}}},"id":7088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"159:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7076,"name":"VmSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13052,"src":"152:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VmSafe_$13052_$","typeString":"type(contract VmSafe)"}},"id":7089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"152:63:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"visibility":"private"},{"id":7093,"nodeType":"VariableDeclaration","src":"222:34:8","nodes":[],"constant":true,"mutability":"constant","name":"RED","nameLocation":"238:3:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7091,"name":"string","nodeType":"ElementaryTypeName","src":"222:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b39316d","id":7092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"244:12:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_e865f62b1188865fdbe08fdbe8546369f5c78a8f677a27514aadc154b4263c18","typeString":"literal_string hex\"1b5b39316d\""},"value":"\u001b[91m"},"visibility":"internal"},{"id":7096,"nodeType":"VariableDeclaration","src":"262:36:8","nodes":[],"constant":true,"mutability":"constant","name":"GREEN","nameLocation":"278:5:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7094,"name":"string","nodeType":"ElementaryTypeName","src":"262:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b39326d","id":7095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"286:12:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_250c6c79af2fd59b948ba31b977e669524bbf27faba009961b135f1635e1e32b","typeString":"literal_string hex\"1b5b39326d\""},"value":"\u001b[92m"},"visibility":"internal"},{"id":7099,"nodeType":"VariableDeclaration","src":"304:37:8","nodes":[],"constant":true,"mutability":"constant","name":"YELLOW","nameLocation":"320:6:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7097,"name":"string","nodeType":"ElementaryTypeName","src":"304:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b39336d","id":7098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"329:12:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_801b445b8c4f71d86cf740b8fd9f85e172d35421144725dd58fed362de2e6cf5","typeString":"literal_string hex\"1b5b39336d\""},"value":"\u001b[93m"},"visibility":"internal"},{"id":7102,"nodeType":"VariableDeclaration","src":"347:35:8","nodes":[],"constant":true,"mutability":"constant","name":"BLUE","nameLocation":"363:4:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7100,"name":"string","nodeType":"ElementaryTypeName","src":"347:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b39346d","id":7101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"370:12:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_66ecf2e89553c52e360a74737e5e4e3d15e4d08217c17497ca50efb90c95d593","typeString":"literal_string hex\"1b5b39346d\""},"value":"\u001b[94m"},"visibility":"internal"},{"id":7105,"nodeType":"VariableDeclaration","src":"388:38:8","nodes":[],"constant":true,"mutability":"constant","name":"MAGENTA","nameLocation":"404:7:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7103,"name":"string","nodeType":"ElementaryTypeName","src":"388:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b39356d","id":7104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"414:12:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_b81cf1fd9bcd2b49f14457c6168490b5ff507c85cc3778934da8235d270d6b5b","typeString":"literal_string hex\"1b5b39356d\""},"value":"\u001b[95m"},"visibility":"internal"},{"id":7108,"nodeType":"VariableDeclaration","src":"432:35:8","nodes":[],"constant":true,"mutability":"constant","name":"CYAN","nameLocation":"448:4:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7106,"name":"string","nodeType":"ElementaryTypeName","src":"432:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b39366d","id":7107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"455:12:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_f73c74e3aa04446480bd18c1b857a46321f6d66d2bfb703d52333566c779447b","typeString":"literal_string hex\"1b5b39366d\""},"value":"\u001b[96m"},"visibility":"internal"},{"id":7111,"nodeType":"VariableDeclaration","src":"473:34:8","nodes":[],"constant":true,"mutability":"constant","name":"BOLD","nameLocation":"489:4:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7109,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b316d","id":7110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"496:11:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_b25b1471c5d449346ad6b37b501b2d5911d6e2bad13ad71d09cdfa3d3b140a17","typeString":"literal_string hex\"1b5b316d\""},"value":"\u001b[1m"},"visibility":"internal"},{"id":7114,"nodeType":"VariableDeclaration","src":"513:33:8","nodes":[],"constant":true,"mutability":"constant","name":"DIM","nameLocation":"529:3:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7112,"name":"string","nodeType":"ElementaryTypeName","src":"513:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b326d","id":7113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"535:11:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_2f556fa434add49eadfa043e74ff00496b89a16068544c1118ec19f5d8603d51","typeString":"literal_string hex\"1b5b326d\""},"value":"\u001b[2m"},"visibility":"internal"},{"id":7117,"nodeType":"VariableDeclaration","src":"552:36:8","nodes":[],"constant":true,"mutability":"constant","name":"ITALIC","nameLocation":"568:6:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7115,"name":"string","nodeType":"ElementaryTypeName","src":"552:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b336d","id":7116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"577:11:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_3889f2814cfbcc60c7a881028023c05aed4a6dae60be0df554f690b1f4e7411f","typeString":"literal_string hex\"1b5b336d\""},"value":"\u001b[3m"},"visibility":"internal"},{"id":7120,"nodeType":"VariableDeclaration","src":"594:39:8","nodes":[],"constant":true,"mutability":"constant","name":"UNDERLINE","nameLocation":"610:9:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7118,"name":"string","nodeType":"ElementaryTypeName","src":"594:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b346d","id":7119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"622:11:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_48cbbbbdbcd789b35edf67deaad6f96f406603d9181318ca90ef32f90fedb5bb","typeString":"literal_string hex\"1b5b346d\""},"value":"\u001b[4m"},"visibility":"internal"},{"id":7123,"nodeType":"VariableDeclaration","src":"639:37:8","nodes":[],"constant":true,"mutability":"constant","name":"INVERSE","nameLocation":"655:7:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7121,"name":"string","nodeType":"ElementaryTypeName","src":"639:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b376d","id":7122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"665:11:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_963e08c830a620b3640a99ac46ac6850f28c8f20be064518b3acc7016c3e286e","typeString":"literal_string hex\"1b5b376d\""},"value":"\u001b[7m"},"visibility":"internal"},{"id":7126,"nodeType":"VariableDeclaration","src":"682:35:8","nodes":[],"constant":true,"mutability":"constant","name":"RESET","nameLocation":"698:5:8","scope":8280,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7124,"name":"string","nodeType":"ElementaryTypeName","src":"682:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1b5b306d","id":7125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"706:11:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_289c700ce2c600d61adfc66f83b41c26150052f3ea6c772e582ea6afd03d1949","typeString":"literal_string hex\"1b5b306d\""},"value":"\u001b[0m"},"visibility":"internal"},{"id":7146,"nodeType":"FunctionDefinition","src":"724:167:8","nodes":[],"body":{"id":7145,"nodeType":"Block","src":"823:68:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7139,"name":"style","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7128,"src":"864:5:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7140,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7130,"src":"871:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7141,"name":"RESET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7126,"src":"877:5:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":7137,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"847:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"851:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"847:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"847:36:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"840:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7135,"name":"string","nodeType":"ElementaryTypeName","src":"840:6:8","typeDescriptions":{}}},"id":7143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"840:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7134,"id":7144,"nodeType":"Return","src":"833:51:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"styleConcat","nameLocation":"733:11:8","parameters":{"id":7131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7128,"mutability":"mutable","name":"style","nameLocation":"759:5:8","nodeType":"VariableDeclaration","scope":7146,"src":"745:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7127,"name":"string","nodeType":"ElementaryTypeName","src":"745:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":7130,"mutability":"mutable","name":"self","nameLocation":"780:4:8","nodeType":"VariableDeclaration","scope":7146,"src":"766:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7129,"name":"string","nodeType":"ElementaryTypeName","src":"766:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"744:41:8"},"returnParameters":{"id":7134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7146,"src":"808:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7132,"name":"string","nodeType":"ElementaryTypeName","src":"808:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"807:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"private"},{"id":7159,"nodeType":"FunctionDefinition","src":"897:117:8","nodes":[],"body":{"id":7158,"nodeType":"Block","src":"968:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7154,"name":"RED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7093,"src":"997:3:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7155,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7148,"src":"1002:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7153,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"985:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"985:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7152,"id":7157,"nodeType":"Return","src":"978:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"red","nameLocation":"906:3:8","parameters":{"id":7149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7148,"mutability":"mutable","name":"self","nameLocation":"924:4:8","nodeType":"VariableDeclaration","scope":7159,"src":"910:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7147,"name":"string","nodeType":"ElementaryTypeName","src":"910:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"909:20:8"},"returnParameters":{"id":7152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7159,"src":"953:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7150,"name":"string","nodeType":"ElementaryTypeName","src":"953:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"952:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7174,"nodeType":"FunctionDefinition","src":"1020:111:8","nodes":[],"body":{"id":7173,"nodeType":"Block","src":"1085:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7169,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7161,"src":"1118:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7167,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"1106:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1109:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"1106:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1106:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7166,"name":"red","nodeType":"Identifier","overloadedDeclarations":[7159,7174,7189,7204,7219],"referencedDeclaration":7159,"src":"1102:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1102:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7165,"id":7172,"nodeType":"Return","src":"1095:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"red","nameLocation":"1029:3:8","parameters":{"id":7162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7161,"mutability":"mutable","name":"self","nameLocation":"1041:4:8","nodeType":"VariableDeclaration","scope":7174,"src":"1033:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7160,"name":"uint256","nodeType":"ElementaryTypeName","src":"1033:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1032:14:8"},"returnParameters":{"id":7165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7174,"src":"1070:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7163,"name":"string","nodeType":"ElementaryTypeName","src":"1070:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1069:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7189,"nodeType":"FunctionDefinition","src":"1137:110:8","nodes":[],"body":{"id":7188,"nodeType":"Block","src":"1201:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7184,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7176,"src":"1234:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":7182,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"1222:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1225:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"1222:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":7185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1222:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7181,"name":"red","nodeType":"Identifier","overloadedDeclarations":[7159,7174,7189,7204,7219],"referencedDeclaration":7159,"src":"1218:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1218:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7180,"id":7187,"nodeType":"Return","src":"1211:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"red","nameLocation":"1146:3:8","parameters":{"id":7177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7176,"mutability":"mutable","name":"self","nameLocation":"1157:4:8","nodeType":"VariableDeclaration","scope":7189,"src":"1150:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7175,"name":"int256","nodeType":"ElementaryTypeName","src":"1150:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1149:13:8"},"returnParameters":{"id":7180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7189,"src":"1186:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7178,"name":"string","nodeType":"ElementaryTypeName","src":"1186:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1185:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7204,"nodeType":"FunctionDefinition","src":"1253:111:8","nodes":[],"body":{"id":7203,"nodeType":"Block","src":"1318:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7199,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7191,"src":"1351:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7197,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"1339:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1342:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"1339:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":7200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1339:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7196,"name":"red","nodeType":"Identifier","overloadedDeclarations":[7159,7174,7189,7204,7219],"referencedDeclaration":7159,"src":"1335:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1335:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7195,"id":7202,"nodeType":"Return","src":"1328:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"red","nameLocation":"1262:3:8","parameters":{"id":7192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7191,"mutability":"mutable","name":"self","nameLocation":"1274:4:8","nodeType":"VariableDeclaration","scope":7204,"src":"1266:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7190,"name":"address","nodeType":"ElementaryTypeName","src":"1266:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1265:14:8"},"returnParameters":{"id":7195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7204,"src":"1303:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7193,"name":"string","nodeType":"ElementaryTypeName","src":"1303:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1302:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7219,"nodeType":"FunctionDefinition","src":"1370:108:8","nodes":[],"body":{"id":7218,"nodeType":"Block","src":"1432:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7214,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7206,"src":"1465:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7212,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"1453:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1456:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"1453:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":7215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7211,"name":"red","nodeType":"Identifier","overloadedDeclarations":[7159,7174,7189,7204,7219],"referencedDeclaration":7159,"src":"1449:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1449:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7210,"id":7217,"nodeType":"Return","src":"1442:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"red","nameLocation":"1379:3:8","parameters":{"id":7207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7206,"mutability":"mutable","name":"self","nameLocation":"1388:4:8","nodeType":"VariableDeclaration","scope":7219,"src":"1383:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7205,"name":"bool","nodeType":"ElementaryTypeName","src":"1383:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1382:11:8"},"returnParameters":{"id":7210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7209,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7219,"src":"1417:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7208,"name":"string","nodeType":"ElementaryTypeName","src":"1417:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1416:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7234,"nodeType":"FunctionDefinition","src":"1484:121:8","nodes":[],"body":{"id":7233,"nodeType":"Block","src":"1559:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7229,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7221,"src":"1592:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7227,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"1580:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1583:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"1580:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":7230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1580:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7226,"name":"red","nodeType":"Identifier","overloadedDeclarations":[7159,7174,7189,7204,7219],"referencedDeclaration":7159,"src":"1576:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1576:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7225,"id":7232,"nodeType":"Return","src":"1569:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"redBytes","nameLocation":"1493:8:8","parameters":{"id":7222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7221,"mutability":"mutable","name":"self","nameLocation":"1515:4:8","nodeType":"VariableDeclaration","scope":7234,"src":"1502:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7220,"name":"bytes","nodeType":"ElementaryTypeName","src":"1502:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1501:19:8"},"returnParameters":{"id":7225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7234,"src":"1544:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7223,"name":"string","nodeType":"ElementaryTypeName","src":"1544:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1543:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7249,"nodeType":"FunctionDefinition","src":"1611:118:8","nodes":[],"body":{"id":7248,"nodeType":"Block","src":"1683:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7244,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7236,"src":"1716:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7242,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"1704:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1707:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"1704:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":7245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1704:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7241,"name":"red","nodeType":"Identifier","overloadedDeclarations":[7159,7174,7189,7204,7219],"referencedDeclaration":7159,"src":"1700:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1700:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7240,"id":7247,"nodeType":"Return","src":"1693:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"redBytes32","nameLocation":"1620:10:8","parameters":{"id":7237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7236,"mutability":"mutable","name":"self","nameLocation":"1639:4:8","nodeType":"VariableDeclaration","scope":7249,"src":"1631:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1631:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1630:14:8"},"returnParameters":{"id":7240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7249,"src":"1668:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7238,"name":"string","nodeType":"ElementaryTypeName","src":"1668:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1667:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7262,"nodeType":"FunctionDefinition","src":"1735:121:8","nodes":[],"body":{"id":7261,"nodeType":"Block","src":"1808:48:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7257,"name":"GREEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7096,"src":"1837:5:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7258,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7251,"src":"1844:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7256,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"1825:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1825:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7255,"id":7260,"nodeType":"Return","src":"1818:31:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"green","nameLocation":"1744:5:8","parameters":{"id":7252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7251,"mutability":"mutable","name":"self","nameLocation":"1764:4:8","nodeType":"VariableDeclaration","scope":7262,"src":"1750:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7250,"name":"string","nodeType":"ElementaryTypeName","src":"1750:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1749:20:8"},"returnParameters":{"id":7255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7262,"src":"1793:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7253,"name":"string","nodeType":"ElementaryTypeName","src":"1793:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1792:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7277,"nodeType":"FunctionDefinition","src":"1862:115:8","nodes":[],"body":{"id":7276,"nodeType":"Block","src":"1929:48:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7272,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7264,"src":"1964:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7270,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"1952:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1955:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"1952:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1952:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7269,"name":"green","nodeType":"Identifier","overloadedDeclarations":[7262,7277,7292,7307,7322],"referencedDeclaration":7262,"src":"1946:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1946:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7268,"id":7275,"nodeType":"Return","src":"1939:31:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"green","nameLocation":"1871:5:8","parameters":{"id":7265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7264,"mutability":"mutable","name":"self","nameLocation":"1885:4:8","nodeType":"VariableDeclaration","scope":7277,"src":"1877:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7263,"name":"uint256","nodeType":"ElementaryTypeName","src":"1877:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1876:14:8"},"returnParameters":{"id":7268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7277,"src":"1914:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7266,"name":"string","nodeType":"ElementaryTypeName","src":"1914:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1913:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7292,"nodeType":"FunctionDefinition","src":"1983:114:8","nodes":[],"body":{"id":7291,"nodeType":"Block","src":"2049:48:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7287,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7279,"src":"2084:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":7285,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"2072:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2075:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"2072:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":7288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2072:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7284,"name":"green","nodeType":"Identifier","overloadedDeclarations":[7262,7277,7292,7307,7322],"referencedDeclaration":7262,"src":"2066:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2066:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7283,"id":7290,"nodeType":"Return","src":"2059:31:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"green","nameLocation":"1992:5:8","parameters":{"id":7280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7279,"mutability":"mutable","name":"self","nameLocation":"2005:4:8","nodeType":"VariableDeclaration","scope":7292,"src":"1998:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7278,"name":"int256","nodeType":"ElementaryTypeName","src":"1998:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1997:13:8"},"returnParameters":{"id":7283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7292,"src":"2034:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7281,"name":"string","nodeType":"ElementaryTypeName","src":"2034:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2033:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7307,"nodeType":"FunctionDefinition","src":"2103:115:8","nodes":[],"body":{"id":7306,"nodeType":"Block","src":"2170:48:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7302,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7294,"src":"2205:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7300,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"2193:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2196:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"2193:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":7303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2193:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7299,"name":"green","nodeType":"Identifier","overloadedDeclarations":[7262,7277,7292,7307,7322],"referencedDeclaration":7262,"src":"2187:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2187:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7298,"id":7305,"nodeType":"Return","src":"2180:31:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"green","nameLocation":"2112:5:8","parameters":{"id":7295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7294,"mutability":"mutable","name":"self","nameLocation":"2126:4:8","nodeType":"VariableDeclaration","scope":7307,"src":"2118:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7293,"name":"address","nodeType":"ElementaryTypeName","src":"2118:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2117:14:8"},"returnParameters":{"id":7298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7307,"src":"2155:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7296,"name":"string","nodeType":"ElementaryTypeName","src":"2155:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2154:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7322,"nodeType":"FunctionDefinition","src":"2224:112:8","nodes":[],"body":{"id":7321,"nodeType":"Block","src":"2288:48:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7317,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7309,"src":"2323:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7315,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"2311:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2314:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"2311:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":7318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2311:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7314,"name":"green","nodeType":"Identifier","overloadedDeclarations":[7262,7277,7292,7307,7322],"referencedDeclaration":7262,"src":"2305:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2305:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7313,"id":7320,"nodeType":"Return","src":"2298:31:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"green","nameLocation":"2233:5:8","parameters":{"id":7310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7309,"mutability":"mutable","name":"self","nameLocation":"2244:4:8","nodeType":"VariableDeclaration","scope":7322,"src":"2239:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7308,"name":"bool","nodeType":"ElementaryTypeName","src":"2239:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2238:11:8"},"returnParameters":{"id":7313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7322,"src":"2273:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7311,"name":"string","nodeType":"ElementaryTypeName","src":"2273:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2272:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7337,"nodeType":"FunctionDefinition","src":"2342:125:8","nodes":[],"body":{"id":7336,"nodeType":"Block","src":"2419:48:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7332,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7324,"src":"2454:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7330,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"2442:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2445:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"2442:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":7333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2442:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7329,"name":"green","nodeType":"Identifier","overloadedDeclarations":[7262,7277,7292,7307,7322],"referencedDeclaration":7262,"src":"2436:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2436:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7328,"id":7335,"nodeType":"Return","src":"2429:31:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"greenBytes","nameLocation":"2351:10:8","parameters":{"id":7325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7324,"mutability":"mutable","name":"self","nameLocation":"2375:4:8","nodeType":"VariableDeclaration","scope":7337,"src":"2362:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7323,"name":"bytes","nodeType":"ElementaryTypeName","src":"2362:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2361:19:8"},"returnParameters":{"id":7328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7337,"src":"2404:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7326,"name":"string","nodeType":"ElementaryTypeName","src":"2404:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2403:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7352,"nodeType":"FunctionDefinition","src":"2473:122:8","nodes":[],"body":{"id":7351,"nodeType":"Block","src":"2547:48:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7347,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7339,"src":"2582:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7345,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"2570:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2573:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"2570:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":7348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2570:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7344,"name":"green","nodeType":"Identifier","overloadedDeclarations":[7262,7277,7292,7307,7322],"referencedDeclaration":7262,"src":"2564:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2564:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7343,"id":7350,"nodeType":"Return","src":"2557:31:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"greenBytes32","nameLocation":"2482:12:8","parameters":{"id":7340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7339,"mutability":"mutable","name":"self","nameLocation":"2503:4:8","nodeType":"VariableDeclaration","scope":7352,"src":"2495:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2495:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2494:14:8"},"returnParameters":{"id":7343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7352,"src":"2532:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7341,"name":"string","nodeType":"ElementaryTypeName","src":"2532:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2531:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7365,"nodeType":"FunctionDefinition","src":"2601:123:8","nodes":[],"body":{"id":7364,"nodeType":"Block","src":"2675:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7360,"name":"YELLOW","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7099,"src":"2704:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7361,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7354,"src":"2712:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7359,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"2692:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7358,"id":7363,"nodeType":"Return","src":"2685:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"yellow","nameLocation":"2610:6:8","parameters":{"id":7355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7354,"mutability":"mutable","name":"self","nameLocation":"2631:4:8","nodeType":"VariableDeclaration","scope":7365,"src":"2617:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7353,"name":"string","nodeType":"ElementaryTypeName","src":"2617:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2616:20:8"},"returnParameters":{"id":7358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7365,"src":"2660:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7356,"name":"string","nodeType":"ElementaryTypeName","src":"2660:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2659:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7380,"nodeType":"FunctionDefinition","src":"2730:117:8","nodes":[],"body":{"id":7379,"nodeType":"Block","src":"2798:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7375,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7367,"src":"2834:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7373,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"2822:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2825:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"2822:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2822:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7372,"name":"yellow","nodeType":"Identifier","overloadedDeclarations":[7365,7380,7395,7410,7425],"referencedDeclaration":7365,"src":"2815:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2815:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7371,"id":7378,"nodeType":"Return","src":"2808:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"yellow","nameLocation":"2739:6:8","parameters":{"id":7368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7367,"mutability":"mutable","name":"self","nameLocation":"2754:4:8","nodeType":"VariableDeclaration","scope":7380,"src":"2746:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7366,"name":"uint256","nodeType":"ElementaryTypeName","src":"2746:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2745:14:8"},"returnParameters":{"id":7371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7380,"src":"2783:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7369,"name":"string","nodeType":"ElementaryTypeName","src":"2783:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2782:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7395,"nodeType":"FunctionDefinition","src":"2853:116:8","nodes":[],"body":{"id":7394,"nodeType":"Block","src":"2920:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7390,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7382,"src":"2956:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":7388,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"2944:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2947:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"2944:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":7391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2944:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7387,"name":"yellow","nodeType":"Identifier","overloadedDeclarations":[7365,7380,7395,7410,7425],"referencedDeclaration":7365,"src":"2937:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2937:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7386,"id":7393,"nodeType":"Return","src":"2930:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"yellow","nameLocation":"2862:6:8","parameters":{"id":7383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7382,"mutability":"mutable","name":"self","nameLocation":"2876:4:8","nodeType":"VariableDeclaration","scope":7395,"src":"2869:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7381,"name":"int256","nodeType":"ElementaryTypeName","src":"2869:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2868:13:8"},"returnParameters":{"id":7386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7395,"src":"2905:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7384,"name":"string","nodeType":"ElementaryTypeName","src":"2905:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2904:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7410,"nodeType":"FunctionDefinition","src":"2975:117:8","nodes":[],"body":{"id":7409,"nodeType":"Block","src":"3043:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7405,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7397,"src":"3079:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7403,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"3067:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3070:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"3067:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":7406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3067:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7402,"name":"yellow","nodeType":"Identifier","overloadedDeclarations":[7365,7380,7395,7410,7425],"referencedDeclaration":7365,"src":"3060:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3060:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7401,"id":7408,"nodeType":"Return","src":"3053:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"yellow","nameLocation":"2984:6:8","parameters":{"id":7398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7397,"mutability":"mutable","name":"self","nameLocation":"2999:4:8","nodeType":"VariableDeclaration","scope":7410,"src":"2991:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7396,"name":"address","nodeType":"ElementaryTypeName","src":"2991:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2990:14:8"},"returnParameters":{"id":7401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7410,"src":"3028:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7399,"name":"string","nodeType":"ElementaryTypeName","src":"3028:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3027:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7425,"nodeType":"FunctionDefinition","src":"3098:114:8","nodes":[],"body":{"id":7424,"nodeType":"Block","src":"3163:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7420,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7412,"src":"3199:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7418,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"3187:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3190:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"3187:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":7421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3187:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7417,"name":"yellow","nodeType":"Identifier","overloadedDeclarations":[7365,7380,7395,7410,7425],"referencedDeclaration":7365,"src":"3180:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3180:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7416,"id":7423,"nodeType":"Return","src":"3173:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"yellow","nameLocation":"3107:6:8","parameters":{"id":7413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7412,"mutability":"mutable","name":"self","nameLocation":"3119:4:8","nodeType":"VariableDeclaration","scope":7425,"src":"3114:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7411,"name":"bool","nodeType":"ElementaryTypeName","src":"3114:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3113:11:8"},"returnParameters":{"id":7416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7425,"src":"3148:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7414,"name":"string","nodeType":"ElementaryTypeName","src":"3148:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3147:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7440,"nodeType":"FunctionDefinition","src":"3218:127:8","nodes":[],"body":{"id":7439,"nodeType":"Block","src":"3296:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7435,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7427,"src":"3332:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7433,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"3320:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3323:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"3320:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":7436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3320:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7432,"name":"yellow","nodeType":"Identifier","overloadedDeclarations":[7365,7380,7395,7410,7425],"referencedDeclaration":7365,"src":"3313:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3313:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7431,"id":7438,"nodeType":"Return","src":"3306:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"yellowBytes","nameLocation":"3227:11:8","parameters":{"id":7428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7427,"mutability":"mutable","name":"self","nameLocation":"3252:4:8","nodeType":"VariableDeclaration","scope":7440,"src":"3239:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7426,"name":"bytes","nodeType":"ElementaryTypeName","src":"3239:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3238:19:8"},"returnParameters":{"id":7431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7440,"src":"3281:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7429,"name":"string","nodeType":"ElementaryTypeName","src":"3281:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3280:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7455,"nodeType":"FunctionDefinition","src":"3351:124:8","nodes":[],"body":{"id":7454,"nodeType":"Block","src":"3426:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7450,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7442,"src":"3462:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7448,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"3450:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3453:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"3450:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":7451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3450:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7447,"name":"yellow","nodeType":"Identifier","overloadedDeclarations":[7365,7380,7395,7410,7425],"referencedDeclaration":7365,"src":"3443:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3443:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7446,"id":7453,"nodeType":"Return","src":"3436:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"yellowBytes32","nameLocation":"3360:13:8","parameters":{"id":7443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7442,"mutability":"mutable","name":"self","nameLocation":"3382:4:8","nodeType":"VariableDeclaration","scope":7455,"src":"3374:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7441,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3374:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3373:14:8"},"returnParameters":{"id":7446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7455,"src":"3411:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7444,"name":"string","nodeType":"ElementaryTypeName","src":"3411:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3410:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7468,"nodeType":"FunctionDefinition","src":"3481:119:8","nodes":[],"body":{"id":7467,"nodeType":"Block","src":"3553:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7463,"name":"BLUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7102,"src":"3582:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7464,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7457,"src":"3588:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7462,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"3570:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3570:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7461,"id":7466,"nodeType":"Return","src":"3563:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"blue","nameLocation":"3490:4:8","parameters":{"id":7458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7457,"mutability":"mutable","name":"self","nameLocation":"3509:4:8","nodeType":"VariableDeclaration","scope":7468,"src":"3495:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7456,"name":"string","nodeType":"ElementaryTypeName","src":"3495:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3494:20:8"},"returnParameters":{"id":7461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7468,"src":"3538:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7459,"name":"string","nodeType":"ElementaryTypeName","src":"3538:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3537:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7483,"nodeType":"FunctionDefinition","src":"3606:113:8","nodes":[],"body":{"id":7482,"nodeType":"Block","src":"3672:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7478,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7470,"src":"3706:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7476,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"3694:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3697:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"3694:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3694:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7475,"name":"blue","nodeType":"Identifier","overloadedDeclarations":[7468,7483,7498,7513,7528],"referencedDeclaration":7468,"src":"3689:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3689:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7474,"id":7481,"nodeType":"Return","src":"3682:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"blue","nameLocation":"3615:4:8","parameters":{"id":7471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7470,"mutability":"mutable","name":"self","nameLocation":"3628:4:8","nodeType":"VariableDeclaration","scope":7483,"src":"3620:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7469,"name":"uint256","nodeType":"ElementaryTypeName","src":"3620:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3619:14:8"},"returnParameters":{"id":7474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7483,"src":"3657:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7472,"name":"string","nodeType":"ElementaryTypeName","src":"3657:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3656:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7498,"nodeType":"FunctionDefinition","src":"3725:112:8","nodes":[],"body":{"id":7497,"nodeType":"Block","src":"3790:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7493,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7485,"src":"3824:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":7491,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"3812:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3815:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"3812:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":7494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3812:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7490,"name":"blue","nodeType":"Identifier","overloadedDeclarations":[7468,7483,7498,7513,7528],"referencedDeclaration":7468,"src":"3807:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7489,"id":7496,"nodeType":"Return","src":"3800:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"blue","nameLocation":"3734:4:8","parameters":{"id":7486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7485,"mutability":"mutable","name":"self","nameLocation":"3746:4:8","nodeType":"VariableDeclaration","scope":7498,"src":"3739:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7484,"name":"int256","nodeType":"ElementaryTypeName","src":"3739:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"3738:13:8"},"returnParameters":{"id":7489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7498,"src":"3775:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7487,"name":"string","nodeType":"ElementaryTypeName","src":"3775:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3774:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7513,"nodeType":"FunctionDefinition","src":"3843:113:8","nodes":[],"body":{"id":7512,"nodeType":"Block","src":"3909:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7508,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7500,"src":"3943:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7506,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"3931:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3934:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"3931:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":7509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3931:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7505,"name":"blue","nodeType":"Identifier","overloadedDeclarations":[7468,7483,7498,7513,7528],"referencedDeclaration":7468,"src":"3926:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3926:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7504,"id":7511,"nodeType":"Return","src":"3919:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"blue","nameLocation":"3852:4:8","parameters":{"id":7501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7500,"mutability":"mutable","name":"self","nameLocation":"3865:4:8","nodeType":"VariableDeclaration","scope":7513,"src":"3857:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7499,"name":"address","nodeType":"ElementaryTypeName","src":"3857:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3856:14:8"},"returnParameters":{"id":7504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7513,"src":"3894:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7502,"name":"string","nodeType":"ElementaryTypeName","src":"3894:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3893:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7528,"nodeType":"FunctionDefinition","src":"3962:110:8","nodes":[],"body":{"id":7527,"nodeType":"Block","src":"4025:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7523,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7515,"src":"4059:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7521,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"4047:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4050:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"4047:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":7524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4047:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7520,"name":"blue","nodeType":"Identifier","overloadedDeclarations":[7468,7483,7498,7513,7528],"referencedDeclaration":7468,"src":"4042:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4042:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7519,"id":7526,"nodeType":"Return","src":"4035:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"blue","nameLocation":"3971:4:8","parameters":{"id":7516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7515,"mutability":"mutable","name":"self","nameLocation":"3981:4:8","nodeType":"VariableDeclaration","scope":7528,"src":"3976:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7514,"name":"bool","nodeType":"ElementaryTypeName","src":"3976:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3975:11:8"},"returnParameters":{"id":7519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7518,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7528,"src":"4010:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7517,"name":"string","nodeType":"ElementaryTypeName","src":"4010:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4009:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7543,"nodeType":"FunctionDefinition","src":"4078:123:8","nodes":[],"body":{"id":7542,"nodeType":"Block","src":"4154:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7538,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7530,"src":"4188:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7536,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"4176:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4179:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"4176:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":7539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4176:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7535,"name":"blue","nodeType":"Identifier","overloadedDeclarations":[7468,7483,7498,7513,7528],"referencedDeclaration":7468,"src":"4171:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4171:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7534,"id":7541,"nodeType":"Return","src":"4164:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"blueBytes","nameLocation":"4087:9:8","parameters":{"id":7531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7530,"mutability":"mutable","name":"self","nameLocation":"4110:4:8","nodeType":"VariableDeclaration","scope":7543,"src":"4097:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7529,"name":"bytes","nodeType":"ElementaryTypeName","src":"4097:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4096:19:8"},"returnParameters":{"id":7534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7543,"src":"4139:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7532,"name":"string","nodeType":"ElementaryTypeName","src":"4139:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4138:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7558,"nodeType":"FunctionDefinition","src":"4207:120:8","nodes":[],"body":{"id":7557,"nodeType":"Block","src":"4280:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7553,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7545,"src":"4314:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7551,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"4302:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4305:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"4302:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":7554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7550,"name":"blue","nodeType":"Identifier","overloadedDeclarations":[7468,7483,7498,7513,7528],"referencedDeclaration":7468,"src":"4297:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7549,"id":7556,"nodeType":"Return","src":"4290:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"blueBytes32","nameLocation":"4216:11:8","parameters":{"id":7546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7545,"mutability":"mutable","name":"self","nameLocation":"4236:4:8","nodeType":"VariableDeclaration","scope":7558,"src":"4228:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4228:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4227:14:8"},"returnParameters":{"id":7549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7558,"src":"4265:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7547,"name":"string","nodeType":"ElementaryTypeName","src":"4265:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4264:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7571,"nodeType":"FunctionDefinition","src":"4333:125:8","nodes":[],"body":{"id":7570,"nodeType":"Block","src":"4408:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7566,"name":"MAGENTA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7105,"src":"4437:7:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7567,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7560,"src":"4446:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7565,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"4425:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4425:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7564,"id":7569,"nodeType":"Return","src":"4418:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"magenta","nameLocation":"4342:7:8","parameters":{"id":7561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7560,"mutability":"mutable","name":"self","nameLocation":"4364:4:8","nodeType":"VariableDeclaration","scope":7571,"src":"4350:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7559,"name":"string","nodeType":"ElementaryTypeName","src":"4350:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4349:20:8"},"returnParameters":{"id":7564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7571,"src":"4393:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7562,"name":"string","nodeType":"ElementaryTypeName","src":"4393:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4392:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7586,"nodeType":"FunctionDefinition","src":"4464:119:8","nodes":[],"body":{"id":7585,"nodeType":"Block","src":"4533:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7581,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7573,"src":"4570:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7579,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"4558:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4561:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"4558:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4558:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7578,"name":"magenta","nodeType":"Identifier","overloadedDeclarations":[7571,7586,7601,7616,7631],"referencedDeclaration":7571,"src":"4550:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4550:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7577,"id":7584,"nodeType":"Return","src":"4543:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"magenta","nameLocation":"4473:7:8","parameters":{"id":7574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7573,"mutability":"mutable","name":"self","nameLocation":"4489:4:8","nodeType":"VariableDeclaration","scope":7586,"src":"4481:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7572,"name":"uint256","nodeType":"ElementaryTypeName","src":"4481:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4480:14:8"},"returnParameters":{"id":7577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7586,"src":"4518:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7575,"name":"string","nodeType":"ElementaryTypeName","src":"4518:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4517:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7601,"nodeType":"FunctionDefinition","src":"4589:118:8","nodes":[],"body":{"id":7600,"nodeType":"Block","src":"4657:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7596,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7588,"src":"4694:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":7594,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"4682:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4685:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"4682:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":7597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4682:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7593,"name":"magenta","nodeType":"Identifier","overloadedDeclarations":[7571,7586,7601,7616,7631],"referencedDeclaration":7571,"src":"4674:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4674:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7592,"id":7599,"nodeType":"Return","src":"4667:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"magenta","nameLocation":"4598:7:8","parameters":{"id":7589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7588,"mutability":"mutable","name":"self","nameLocation":"4613:4:8","nodeType":"VariableDeclaration","scope":7601,"src":"4606:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7587,"name":"int256","nodeType":"ElementaryTypeName","src":"4606:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4605:13:8"},"returnParameters":{"id":7592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7601,"src":"4642:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7590,"name":"string","nodeType":"ElementaryTypeName","src":"4642:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4641:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7616,"nodeType":"FunctionDefinition","src":"4713:119:8","nodes":[],"body":{"id":7615,"nodeType":"Block","src":"4782:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7611,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7603,"src":"4819:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7609,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"4807:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4810:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"4807:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":7612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4807:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7608,"name":"magenta","nodeType":"Identifier","overloadedDeclarations":[7571,7586,7601,7616,7631],"referencedDeclaration":7571,"src":"4799:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4799:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7607,"id":7614,"nodeType":"Return","src":"4792:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"magenta","nameLocation":"4722:7:8","parameters":{"id":7604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7603,"mutability":"mutable","name":"self","nameLocation":"4738:4:8","nodeType":"VariableDeclaration","scope":7616,"src":"4730:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7602,"name":"address","nodeType":"ElementaryTypeName","src":"4730:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4729:14:8"},"returnParameters":{"id":7607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7616,"src":"4767:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7605,"name":"string","nodeType":"ElementaryTypeName","src":"4767:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4766:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7631,"nodeType":"FunctionDefinition","src":"4838:116:8","nodes":[],"body":{"id":7630,"nodeType":"Block","src":"4904:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7626,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7618,"src":"4941:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7624,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"4929:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4932:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"4929:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":7627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4929:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7623,"name":"magenta","nodeType":"Identifier","overloadedDeclarations":[7571,7586,7601,7616,7631],"referencedDeclaration":7571,"src":"4921:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4921:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7622,"id":7629,"nodeType":"Return","src":"4914:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"magenta","nameLocation":"4847:7:8","parameters":{"id":7619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7618,"mutability":"mutable","name":"self","nameLocation":"4860:4:8","nodeType":"VariableDeclaration","scope":7631,"src":"4855:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7617,"name":"bool","nodeType":"ElementaryTypeName","src":"4855:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4854:11:8"},"returnParameters":{"id":7622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7631,"src":"4889:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7620,"name":"string","nodeType":"ElementaryTypeName","src":"4889:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4888:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7646,"nodeType":"FunctionDefinition","src":"4960:129:8","nodes":[],"body":{"id":7645,"nodeType":"Block","src":"5039:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7641,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7633,"src":"5076:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7639,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"5064:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5067:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"5064:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":7642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5064:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7638,"name":"magenta","nodeType":"Identifier","overloadedDeclarations":[7571,7586,7601,7616,7631],"referencedDeclaration":7571,"src":"5056:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5056:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7637,"id":7644,"nodeType":"Return","src":"5049:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"magentaBytes","nameLocation":"4969:12:8","parameters":{"id":7634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7633,"mutability":"mutable","name":"self","nameLocation":"4995:4:8","nodeType":"VariableDeclaration","scope":7646,"src":"4982:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7632,"name":"bytes","nodeType":"ElementaryTypeName","src":"4982:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4981:19:8"},"returnParameters":{"id":7637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7636,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7646,"src":"5024:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7635,"name":"string","nodeType":"ElementaryTypeName","src":"5024:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5023:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7661,"nodeType":"FunctionDefinition","src":"5095:126:8","nodes":[],"body":{"id":7660,"nodeType":"Block","src":"5171:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7656,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7648,"src":"5208:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7654,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"5196:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5199:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"5196:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":7657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5196:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7653,"name":"magenta","nodeType":"Identifier","overloadedDeclarations":[7571,7586,7601,7616,7631],"referencedDeclaration":7571,"src":"5188:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5188:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7652,"id":7659,"nodeType":"Return","src":"5181:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"magentaBytes32","nameLocation":"5104:14:8","parameters":{"id":7649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7648,"mutability":"mutable","name":"self","nameLocation":"5127:4:8","nodeType":"VariableDeclaration","scope":7661,"src":"5119:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5119:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5118:14:8"},"returnParameters":{"id":7652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7661,"src":"5156:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7650,"name":"string","nodeType":"ElementaryTypeName","src":"5156:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5155:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7674,"nodeType":"FunctionDefinition","src":"5227:119:8","nodes":[],"body":{"id":7673,"nodeType":"Block","src":"5299:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7669,"name":"CYAN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7108,"src":"5328:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7670,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7663,"src":"5334:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7668,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"5316:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5316:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7667,"id":7672,"nodeType":"Return","src":"5309:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"cyan","nameLocation":"5236:4:8","parameters":{"id":7664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7663,"mutability":"mutable","name":"self","nameLocation":"5255:4:8","nodeType":"VariableDeclaration","scope":7674,"src":"5241:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7662,"name":"string","nodeType":"ElementaryTypeName","src":"5241:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5240:20:8"},"returnParameters":{"id":7667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7666,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7674,"src":"5284:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7665,"name":"string","nodeType":"ElementaryTypeName","src":"5284:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5283:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7689,"nodeType":"FunctionDefinition","src":"5352:113:8","nodes":[],"body":{"id":7688,"nodeType":"Block","src":"5418:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7684,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7676,"src":"5452:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7682,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"5440:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5443:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"5440:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5440:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7681,"name":"cyan","nodeType":"Identifier","overloadedDeclarations":[7674,7689,7704,7719,7734],"referencedDeclaration":7674,"src":"5435:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5435:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7680,"id":7687,"nodeType":"Return","src":"5428:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"cyan","nameLocation":"5361:4:8","parameters":{"id":7677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7676,"mutability":"mutable","name":"self","nameLocation":"5374:4:8","nodeType":"VariableDeclaration","scope":7689,"src":"5366:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7675,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5365:14:8"},"returnParameters":{"id":7680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7689,"src":"5403:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7678,"name":"string","nodeType":"ElementaryTypeName","src":"5403:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5402:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7704,"nodeType":"FunctionDefinition","src":"5471:112:8","nodes":[],"body":{"id":7703,"nodeType":"Block","src":"5536:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7699,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7691,"src":"5570:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":7697,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"5558:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5561:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"5558:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":7700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5558:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7696,"name":"cyan","nodeType":"Identifier","overloadedDeclarations":[7674,7689,7704,7719,7734],"referencedDeclaration":7674,"src":"5553:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5553:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7695,"id":7702,"nodeType":"Return","src":"5546:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"cyan","nameLocation":"5480:4:8","parameters":{"id":7692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7691,"mutability":"mutable","name":"self","nameLocation":"5492:4:8","nodeType":"VariableDeclaration","scope":7704,"src":"5485:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7690,"name":"int256","nodeType":"ElementaryTypeName","src":"5485:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"5484:13:8"},"returnParameters":{"id":7695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7704,"src":"5521:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7693,"name":"string","nodeType":"ElementaryTypeName","src":"5521:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5520:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7719,"nodeType":"FunctionDefinition","src":"5589:113:8","nodes":[],"body":{"id":7718,"nodeType":"Block","src":"5655:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7714,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7706,"src":"5689:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7712,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"5677:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5680:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"5677:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":7715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5677:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7711,"name":"cyan","nodeType":"Identifier","overloadedDeclarations":[7674,7689,7704,7719,7734],"referencedDeclaration":7674,"src":"5672:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5672:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7710,"id":7717,"nodeType":"Return","src":"5665:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"cyan","nameLocation":"5598:4:8","parameters":{"id":7707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7706,"mutability":"mutable","name":"self","nameLocation":"5611:4:8","nodeType":"VariableDeclaration","scope":7719,"src":"5603:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7705,"name":"address","nodeType":"ElementaryTypeName","src":"5603:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5602:14:8"},"returnParameters":{"id":7710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7709,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7719,"src":"5640:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7708,"name":"string","nodeType":"ElementaryTypeName","src":"5640:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5639:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7734,"nodeType":"FunctionDefinition","src":"5708:110:8","nodes":[],"body":{"id":7733,"nodeType":"Block","src":"5771:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7729,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7721,"src":"5805:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7727,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"5793:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5796:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"5793:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":7730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5793:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7726,"name":"cyan","nodeType":"Identifier","overloadedDeclarations":[7674,7689,7704,7719,7734],"referencedDeclaration":7674,"src":"5788:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5788:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7725,"id":7732,"nodeType":"Return","src":"5781:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"cyan","nameLocation":"5717:4:8","parameters":{"id":7722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7721,"mutability":"mutable","name":"self","nameLocation":"5727:4:8","nodeType":"VariableDeclaration","scope":7734,"src":"5722:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7720,"name":"bool","nodeType":"ElementaryTypeName","src":"5722:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5721:11:8"},"returnParameters":{"id":7725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7734,"src":"5756:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7723,"name":"string","nodeType":"ElementaryTypeName","src":"5756:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5755:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7749,"nodeType":"FunctionDefinition","src":"5824:123:8","nodes":[],"body":{"id":7748,"nodeType":"Block","src":"5900:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7744,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7736,"src":"5934:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7742,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"5922:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5925:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"5922:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":7745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5922:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7741,"name":"cyan","nodeType":"Identifier","overloadedDeclarations":[7674,7689,7704,7719,7734],"referencedDeclaration":7674,"src":"5917:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5917:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7740,"id":7747,"nodeType":"Return","src":"5910:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"cyanBytes","nameLocation":"5833:9:8","parameters":{"id":7737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7736,"mutability":"mutable","name":"self","nameLocation":"5856:4:8","nodeType":"VariableDeclaration","scope":7749,"src":"5843:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7735,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5842:19:8"},"returnParameters":{"id":7740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7749,"src":"5885:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7738,"name":"string","nodeType":"ElementaryTypeName","src":"5885:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5884:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7764,"nodeType":"FunctionDefinition","src":"5953:120:8","nodes":[],"body":{"id":7763,"nodeType":"Block","src":"6026:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7759,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7751,"src":"6060:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7757,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"6048:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6051:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"6048:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":7760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6048:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7756,"name":"cyan","nodeType":"Identifier","overloadedDeclarations":[7674,7689,7704,7719,7734],"referencedDeclaration":7674,"src":"6043:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6043:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7755,"id":7762,"nodeType":"Return","src":"6036:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"cyanBytes32","nameLocation":"5962:11:8","parameters":{"id":7752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7751,"mutability":"mutable","name":"self","nameLocation":"5982:4:8","nodeType":"VariableDeclaration","scope":7764,"src":"5974:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7750,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5974:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5973:14:8"},"returnParameters":{"id":7755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7764,"src":"6011:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7753,"name":"string","nodeType":"ElementaryTypeName","src":"6011:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6010:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7777,"nodeType":"FunctionDefinition","src":"6079:119:8","nodes":[],"body":{"id":7776,"nodeType":"Block","src":"6151:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7772,"name":"BOLD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7111,"src":"6180:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7773,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7766,"src":"6186:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7771,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"6168:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6168:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7770,"id":7775,"nodeType":"Return","src":"6161:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"bold","nameLocation":"6088:4:8","parameters":{"id":7767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7766,"mutability":"mutable","name":"self","nameLocation":"6107:4:8","nodeType":"VariableDeclaration","scope":7777,"src":"6093:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7765,"name":"string","nodeType":"ElementaryTypeName","src":"6093:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6092:20:8"},"returnParameters":{"id":7770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7777,"src":"6136:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7768,"name":"string","nodeType":"ElementaryTypeName","src":"6136:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6135:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7792,"nodeType":"FunctionDefinition","src":"6204:113:8","nodes":[],"body":{"id":7791,"nodeType":"Block","src":"6270:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7787,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7779,"src":"6304:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7785,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"6292:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6295:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"6292:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6292:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7784,"name":"bold","nodeType":"Identifier","overloadedDeclarations":[7777,7792,7807,7822,7837],"referencedDeclaration":7777,"src":"6287:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6287:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7783,"id":7790,"nodeType":"Return","src":"6280:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"bold","nameLocation":"6213:4:8","parameters":{"id":7780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7779,"mutability":"mutable","name":"self","nameLocation":"6226:4:8","nodeType":"VariableDeclaration","scope":7792,"src":"6218:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7778,"name":"uint256","nodeType":"ElementaryTypeName","src":"6218:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6217:14:8"},"returnParameters":{"id":7783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7792,"src":"6255:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7781,"name":"string","nodeType":"ElementaryTypeName","src":"6255:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6254:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7807,"nodeType":"FunctionDefinition","src":"6323:112:8","nodes":[],"body":{"id":7806,"nodeType":"Block","src":"6388:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7802,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7794,"src":"6422:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":7800,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"6410:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6413:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"6410:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":7803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6410:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7799,"name":"bold","nodeType":"Identifier","overloadedDeclarations":[7777,7792,7807,7822,7837],"referencedDeclaration":7777,"src":"6405:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6405:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7798,"id":7805,"nodeType":"Return","src":"6398:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"bold","nameLocation":"6332:4:8","parameters":{"id":7795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7794,"mutability":"mutable","name":"self","nameLocation":"6344:4:8","nodeType":"VariableDeclaration","scope":7807,"src":"6337:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7793,"name":"int256","nodeType":"ElementaryTypeName","src":"6337:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"6336:13:8"},"returnParameters":{"id":7798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7807,"src":"6373:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7796,"name":"string","nodeType":"ElementaryTypeName","src":"6373:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6372:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7822,"nodeType":"FunctionDefinition","src":"6441:113:8","nodes":[],"body":{"id":7821,"nodeType":"Block","src":"6507:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7817,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7809,"src":"6541:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7815,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"6529:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6532:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"6529:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":7818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6529:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7814,"name":"bold","nodeType":"Identifier","overloadedDeclarations":[7777,7792,7807,7822,7837],"referencedDeclaration":7777,"src":"6524:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6524:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7813,"id":7820,"nodeType":"Return","src":"6517:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"bold","nameLocation":"6450:4:8","parameters":{"id":7810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7809,"mutability":"mutable","name":"self","nameLocation":"6463:4:8","nodeType":"VariableDeclaration","scope":7822,"src":"6455:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7808,"name":"address","nodeType":"ElementaryTypeName","src":"6455:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6454:14:8"},"returnParameters":{"id":7813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7812,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7822,"src":"6492:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7811,"name":"string","nodeType":"ElementaryTypeName","src":"6492:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6491:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7837,"nodeType":"FunctionDefinition","src":"6560:110:8","nodes":[],"body":{"id":7836,"nodeType":"Block","src":"6623:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7832,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7824,"src":"6657:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7830,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"6645:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6648:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"6645:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":7833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6645:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7829,"name":"bold","nodeType":"Identifier","overloadedDeclarations":[7777,7792,7807,7822,7837],"referencedDeclaration":7777,"src":"6640:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6640:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7828,"id":7835,"nodeType":"Return","src":"6633:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"bold","nameLocation":"6569:4:8","parameters":{"id":7825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7824,"mutability":"mutable","name":"self","nameLocation":"6579:4:8","nodeType":"VariableDeclaration","scope":7837,"src":"6574:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7823,"name":"bool","nodeType":"ElementaryTypeName","src":"6574:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6573:11:8"},"returnParameters":{"id":7828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7837,"src":"6608:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7826,"name":"string","nodeType":"ElementaryTypeName","src":"6608:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6607:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7852,"nodeType":"FunctionDefinition","src":"6676:123:8","nodes":[],"body":{"id":7851,"nodeType":"Block","src":"6752:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7847,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7839,"src":"6786:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7845,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"6774:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6777:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"6774:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":7848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6774:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7844,"name":"bold","nodeType":"Identifier","overloadedDeclarations":[7777,7792,7807,7822,7837],"referencedDeclaration":7777,"src":"6769:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6769:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7843,"id":7850,"nodeType":"Return","src":"6762:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"boldBytes","nameLocation":"6685:9:8","parameters":{"id":7840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7839,"mutability":"mutable","name":"self","nameLocation":"6708:4:8","nodeType":"VariableDeclaration","scope":7852,"src":"6695:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7838,"name":"bytes","nodeType":"ElementaryTypeName","src":"6695:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6694:19:8"},"returnParameters":{"id":7843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7852,"src":"6737:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7841,"name":"string","nodeType":"ElementaryTypeName","src":"6737:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6736:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7867,"nodeType":"FunctionDefinition","src":"6805:120:8","nodes":[],"body":{"id":7866,"nodeType":"Block","src":"6878:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7862,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7854,"src":"6912:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7860,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"6900:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6903:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"6900:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":7863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6900:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7859,"name":"bold","nodeType":"Identifier","overloadedDeclarations":[7777,7792,7807,7822,7837],"referencedDeclaration":7777,"src":"6895:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6895:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7858,"id":7865,"nodeType":"Return","src":"6888:30:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"boldBytes32","nameLocation":"6814:11:8","parameters":{"id":7855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7854,"mutability":"mutable","name":"self","nameLocation":"6834:4:8","nodeType":"VariableDeclaration","scope":7867,"src":"6826:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7853,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6825:14:8"},"returnParameters":{"id":7858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7857,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7867,"src":"6863:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7856,"name":"string","nodeType":"ElementaryTypeName","src":"6863:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6862:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7880,"nodeType":"FunctionDefinition","src":"6931:117:8","nodes":[],"body":{"id":7879,"nodeType":"Block","src":"7002:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7875,"name":"DIM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7114,"src":"7031:3:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7876,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7869,"src":"7036:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7874,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"7019:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7019:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7873,"id":7878,"nodeType":"Return","src":"7012:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"dim","nameLocation":"6940:3:8","parameters":{"id":7870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7869,"mutability":"mutable","name":"self","nameLocation":"6958:4:8","nodeType":"VariableDeclaration","scope":7880,"src":"6944:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7868,"name":"string","nodeType":"ElementaryTypeName","src":"6944:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6943:20:8"},"returnParameters":{"id":7873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7880,"src":"6987:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7871,"name":"string","nodeType":"ElementaryTypeName","src":"6987:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6986:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7895,"nodeType":"FunctionDefinition","src":"7054:111:8","nodes":[],"body":{"id":7894,"nodeType":"Block","src":"7119:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7890,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7882,"src":"7152:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7888,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"7140:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7143:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"7140:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7140:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7887,"name":"dim","nodeType":"Identifier","overloadedDeclarations":[7880,7895,7910,7925,7940],"referencedDeclaration":7880,"src":"7136:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7136:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7886,"id":7893,"nodeType":"Return","src":"7129:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"dim","nameLocation":"7063:3:8","parameters":{"id":7883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7882,"mutability":"mutable","name":"self","nameLocation":"7075:4:8","nodeType":"VariableDeclaration","scope":7895,"src":"7067:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7881,"name":"uint256","nodeType":"ElementaryTypeName","src":"7067:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7066:14:8"},"returnParameters":{"id":7886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7895,"src":"7104:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7884,"name":"string","nodeType":"ElementaryTypeName","src":"7104:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7103:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7910,"nodeType":"FunctionDefinition","src":"7171:110:8","nodes":[],"body":{"id":7909,"nodeType":"Block","src":"7235:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7905,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7897,"src":"7268:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":7903,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"7256:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7259:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"7256:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":7906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7256:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7902,"name":"dim","nodeType":"Identifier","overloadedDeclarations":[7880,7895,7910,7925,7940],"referencedDeclaration":7880,"src":"7252:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7252:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7901,"id":7908,"nodeType":"Return","src":"7245:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"dim","nameLocation":"7180:3:8","parameters":{"id":7898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7897,"mutability":"mutable","name":"self","nameLocation":"7191:4:8","nodeType":"VariableDeclaration","scope":7910,"src":"7184:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7896,"name":"int256","nodeType":"ElementaryTypeName","src":"7184:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"7183:13:8"},"returnParameters":{"id":7901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7900,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7910,"src":"7220:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7899,"name":"string","nodeType":"ElementaryTypeName","src":"7220:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7219:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7925,"nodeType":"FunctionDefinition","src":"7287:111:8","nodes":[],"body":{"id":7924,"nodeType":"Block","src":"7352:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7920,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7912,"src":"7385:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7918,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"7373:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7376:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"7373:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":7921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7373:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7917,"name":"dim","nodeType":"Identifier","overloadedDeclarations":[7880,7895,7910,7925,7940],"referencedDeclaration":7880,"src":"7369:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7369:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7916,"id":7923,"nodeType":"Return","src":"7362:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"dim","nameLocation":"7296:3:8","parameters":{"id":7913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7912,"mutability":"mutable","name":"self","nameLocation":"7308:4:8","nodeType":"VariableDeclaration","scope":7925,"src":"7300:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7911,"name":"address","nodeType":"ElementaryTypeName","src":"7300:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7299:14:8"},"returnParameters":{"id":7916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7925,"src":"7337:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7914,"name":"string","nodeType":"ElementaryTypeName","src":"7337:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7336:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7940,"nodeType":"FunctionDefinition","src":"7404:108:8","nodes":[],"body":{"id":7939,"nodeType":"Block","src":"7466:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7935,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7927,"src":"7499:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7933,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"7487:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7490:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"7487:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":7936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7487:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7932,"name":"dim","nodeType":"Identifier","overloadedDeclarations":[7880,7895,7910,7925,7940],"referencedDeclaration":7880,"src":"7483:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7483:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7931,"id":7938,"nodeType":"Return","src":"7476:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"dim","nameLocation":"7413:3:8","parameters":{"id":7928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7927,"mutability":"mutable","name":"self","nameLocation":"7422:4:8","nodeType":"VariableDeclaration","scope":7940,"src":"7417:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7926,"name":"bool","nodeType":"ElementaryTypeName","src":"7417:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7416:11:8"},"returnParameters":{"id":7931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7940,"src":"7451:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7929,"name":"string","nodeType":"ElementaryTypeName","src":"7451:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7450:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7955,"nodeType":"FunctionDefinition","src":"7518:121:8","nodes":[],"body":{"id":7954,"nodeType":"Block","src":"7593:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7950,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7942,"src":"7626:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":7948,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"7614:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7617:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"7614:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":7951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7614:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7947,"name":"dim","nodeType":"Identifier","overloadedDeclarations":[7880,7895,7910,7925,7940],"referencedDeclaration":7880,"src":"7610:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7610:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7946,"id":7953,"nodeType":"Return","src":"7603:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"dimBytes","nameLocation":"7527:8:8","parameters":{"id":7943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7942,"mutability":"mutable","name":"self","nameLocation":"7549:4:8","nodeType":"VariableDeclaration","scope":7955,"src":"7536:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7941,"name":"bytes","nodeType":"ElementaryTypeName","src":"7536:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7535:19:8"},"returnParameters":{"id":7946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7945,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7955,"src":"7578:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7944,"name":"string","nodeType":"ElementaryTypeName","src":"7578:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7577:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7970,"nodeType":"FunctionDefinition","src":"7645:118:8","nodes":[],"body":{"id":7969,"nodeType":"Block","src":"7717:46:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7965,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7957,"src":"7750:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7963,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"7738:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7741:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"7738:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":7966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7738:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7962,"name":"dim","nodeType":"Identifier","overloadedDeclarations":[7880,7895,7910,7925,7940],"referencedDeclaration":7880,"src":"7734:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7734:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7961,"id":7968,"nodeType":"Return","src":"7727:29:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"dimBytes32","nameLocation":"7654:10:8","parameters":{"id":7958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7957,"mutability":"mutable","name":"self","nameLocation":"7673:4:8","nodeType":"VariableDeclaration","scope":7970,"src":"7665:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7665:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7664:14:8"},"returnParameters":{"id":7961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7970,"src":"7702:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7959,"name":"string","nodeType":"ElementaryTypeName","src":"7702:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7701:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7983,"nodeType":"FunctionDefinition","src":"7769:123:8","nodes":[],"body":{"id":7982,"nodeType":"Block","src":"7843:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":7978,"name":"ITALIC","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7117,"src":"7872:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":7979,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7972,"src":"7880:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7977,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"7860:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":7980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7860:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7976,"id":7981,"nodeType":"Return","src":"7853:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"italic","nameLocation":"7778:6:8","parameters":{"id":7973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7972,"mutability":"mutable","name":"self","nameLocation":"7799:4:8","nodeType":"VariableDeclaration","scope":7983,"src":"7785:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7971,"name":"string","nodeType":"ElementaryTypeName","src":"7785:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7784:20:8"},"returnParameters":{"id":7976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7983,"src":"7828:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7974,"name":"string","nodeType":"ElementaryTypeName","src":"7828:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7827:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7998,"nodeType":"FunctionDefinition","src":"7898:117:8","nodes":[],"body":{"id":7997,"nodeType":"Block","src":"7966:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":7993,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7985,"src":"8002:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7991,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"7990:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":7992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7993:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"7990:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":7994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7990:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7990,"name":"italic","nodeType":"Identifier","overloadedDeclarations":[7983,7998,8013,8028,8043],"referencedDeclaration":7983,"src":"7983:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":7995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7983:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7989,"id":7996,"nodeType":"Return","src":"7976:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"italic","nameLocation":"7907:6:8","parameters":{"id":7986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7985,"mutability":"mutable","name":"self","nameLocation":"7922:4:8","nodeType":"VariableDeclaration","scope":7998,"src":"7914:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7984,"name":"uint256","nodeType":"ElementaryTypeName","src":"7914:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7913:14:8"},"returnParameters":{"id":7989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7998,"src":"7951:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7987,"name":"string","nodeType":"ElementaryTypeName","src":"7951:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7950:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8013,"nodeType":"FunctionDefinition","src":"8021:116:8","nodes":[],"body":{"id":8012,"nodeType":"Block","src":"8088:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8008,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8000,"src":"8124:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":8006,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"8112:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8115:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"8112:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":8009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8112:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8005,"name":"italic","nodeType":"Identifier","overloadedDeclarations":[7983,7998,8013,8028,8043],"referencedDeclaration":7983,"src":"8105:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8105:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8004,"id":8011,"nodeType":"Return","src":"8098:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"italic","nameLocation":"8030:6:8","parameters":{"id":8001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8000,"mutability":"mutable","name":"self","nameLocation":"8044:4:8","nodeType":"VariableDeclaration","scope":8013,"src":"8037:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7999,"name":"int256","nodeType":"ElementaryTypeName","src":"8037:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8036:13:8"},"returnParameters":{"id":8004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8003,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8013,"src":"8073:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8002,"name":"string","nodeType":"ElementaryTypeName","src":"8073:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8072:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8028,"nodeType":"FunctionDefinition","src":"8143:117:8","nodes":[],"body":{"id":8027,"nodeType":"Block","src":"8211:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8023,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8015,"src":"8247:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":8021,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"8235:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8238:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"8235:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":8024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8235:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8020,"name":"italic","nodeType":"Identifier","overloadedDeclarations":[7983,7998,8013,8028,8043],"referencedDeclaration":7983,"src":"8228:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8228:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8019,"id":8026,"nodeType":"Return","src":"8221:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"italic","nameLocation":"8152:6:8","parameters":{"id":8016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8015,"mutability":"mutable","name":"self","nameLocation":"8167:4:8","nodeType":"VariableDeclaration","scope":8028,"src":"8159:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8014,"name":"address","nodeType":"ElementaryTypeName","src":"8159:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8158:14:8"},"returnParameters":{"id":8019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8028,"src":"8196:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8017,"name":"string","nodeType":"ElementaryTypeName","src":"8196:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8195:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8043,"nodeType":"FunctionDefinition","src":"8266:114:8","nodes":[],"body":{"id":8042,"nodeType":"Block","src":"8331:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8038,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8030,"src":"8367:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":8036,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"8355:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8358:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"8355:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":8039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8355:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8035,"name":"italic","nodeType":"Identifier","overloadedDeclarations":[7983,7998,8013,8028,8043],"referencedDeclaration":7983,"src":"8348:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8348:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8034,"id":8041,"nodeType":"Return","src":"8341:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"italic","nameLocation":"8275:6:8","parameters":{"id":8031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8030,"mutability":"mutable","name":"self","nameLocation":"8287:4:8","nodeType":"VariableDeclaration","scope":8043,"src":"8282:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8029,"name":"bool","nodeType":"ElementaryTypeName","src":"8282:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8281:11:8"},"returnParameters":{"id":8034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8043,"src":"8316:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8032,"name":"string","nodeType":"ElementaryTypeName","src":"8316:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8315:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8058,"nodeType":"FunctionDefinition","src":"8386:127:8","nodes":[],"body":{"id":8057,"nodeType":"Block","src":"8464:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8053,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8045,"src":"8500:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":8051,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"8488:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8491:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"8488:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":8054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8488:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8050,"name":"italic","nodeType":"Identifier","overloadedDeclarations":[7983,7998,8013,8028,8043],"referencedDeclaration":7983,"src":"8481:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8481:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8049,"id":8056,"nodeType":"Return","src":"8474:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"italicBytes","nameLocation":"8395:11:8","parameters":{"id":8046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8045,"mutability":"mutable","name":"self","nameLocation":"8420:4:8","nodeType":"VariableDeclaration","scope":8058,"src":"8407:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8044,"name":"bytes","nodeType":"ElementaryTypeName","src":"8407:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8406:19:8"},"returnParameters":{"id":8049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8058,"src":"8449:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8047,"name":"string","nodeType":"ElementaryTypeName","src":"8449:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8448:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8073,"nodeType":"FunctionDefinition","src":"8519:124:8","nodes":[],"body":{"id":8072,"nodeType":"Block","src":"8594:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8068,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8060,"src":"8630:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":8066,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"8618:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8621:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"8618:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":8069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8618:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8065,"name":"italic","nodeType":"Identifier","overloadedDeclarations":[7983,7998,8013,8028,8043],"referencedDeclaration":7983,"src":"8611:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8611:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8064,"id":8071,"nodeType":"Return","src":"8604:32:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"italicBytes32","nameLocation":"8528:13:8","parameters":{"id":8061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8060,"mutability":"mutable","name":"self","nameLocation":"8550:4:8","nodeType":"VariableDeclaration","scope":8073,"src":"8542:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8059,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8542:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8541:14:8"},"returnParameters":{"id":8064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8073,"src":"8579:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8062,"name":"string","nodeType":"ElementaryTypeName","src":"8579:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8578:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8086,"nodeType":"FunctionDefinition","src":"8649:129:8","nodes":[],"body":{"id":8085,"nodeType":"Block","src":"8726:52:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":8081,"name":"UNDERLINE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7120,"src":"8755:9:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":8082,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8075,"src":"8766:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8080,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"8743:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":8083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8743:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8079,"id":8084,"nodeType":"Return","src":"8736:35:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"underline","nameLocation":"8658:9:8","parameters":{"id":8076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8075,"mutability":"mutable","name":"self","nameLocation":"8682:4:8","nodeType":"VariableDeclaration","scope":8086,"src":"8668:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8074,"name":"string","nodeType":"ElementaryTypeName","src":"8668:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8667:20:8"},"returnParameters":{"id":8079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8086,"src":"8711:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8077,"name":"string","nodeType":"ElementaryTypeName","src":"8711:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8710:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8101,"nodeType":"FunctionDefinition","src":"8784:123:8","nodes":[],"body":{"id":8100,"nodeType":"Block","src":"8855:52:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8096,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8088,"src":"8894:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8094,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"8882:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8885:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"8882:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":8097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8882:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8093,"name":"underline","nodeType":"Identifier","overloadedDeclarations":[8086,8101,8116,8131,8146],"referencedDeclaration":8086,"src":"8872:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8872:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8092,"id":8099,"nodeType":"Return","src":"8865:35:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"underline","nameLocation":"8793:9:8","parameters":{"id":8089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8088,"mutability":"mutable","name":"self","nameLocation":"8811:4:8","nodeType":"VariableDeclaration","scope":8101,"src":"8803:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8087,"name":"uint256","nodeType":"ElementaryTypeName","src":"8803:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8802:14:8"},"returnParameters":{"id":8092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8101,"src":"8840:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8090,"name":"string","nodeType":"ElementaryTypeName","src":"8840:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8839:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8116,"nodeType":"FunctionDefinition","src":"8913:122:8","nodes":[],"body":{"id":8115,"nodeType":"Block","src":"8983:52:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8111,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8103,"src":"9022:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":8109,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"9010:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9013:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"9010:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":8112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9010:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8108,"name":"underline","nodeType":"Identifier","overloadedDeclarations":[8086,8101,8116,8131,8146],"referencedDeclaration":8086,"src":"9000:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9000:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8107,"id":8114,"nodeType":"Return","src":"8993:35:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"underline","nameLocation":"8922:9:8","parameters":{"id":8104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8103,"mutability":"mutable","name":"self","nameLocation":"8939:4:8","nodeType":"VariableDeclaration","scope":8116,"src":"8932:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8102,"name":"int256","nodeType":"ElementaryTypeName","src":"8932:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8931:13:8"},"returnParameters":{"id":8107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8116,"src":"8968:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8105,"name":"string","nodeType":"ElementaryTypeName","src":"8968:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8967:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8131,"nodeType":"FunctionDefinition","src":"9041:123:8","nodes":[],"body":{"id":8130,"nodeType":"Block","src":"9112:52:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8126,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8118,"src":"9151:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":8124,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"9139:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9142:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"9139:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":8127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9139:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8123,"name":"underline","nodeType":"Identifier","overloadedDeclarations":[8086,8101,8116,8131,8146],"referencedDeclaration":8086,"src":"9129:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9129:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8122,"id":8129,"nodeType":"Return","src":"9122:35:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"underline","nameLocation":"9050:9:8","parameters":{"id":8119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8118,"mutability":"mutable","name":"self","nameLocation":"9068:4:8","nodeType":"VariableDeclaration","scope":8131,"src":"9060:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8117,"name":"address","nodeType":"ElementaryTypeName","src":"9060:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9059:14:8"},"returnParameters":{"id":8122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8131,"src":"9097:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8120,"name":"string","nodeType":"ElementaryTypeName","src":"9097:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9096:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8146,"nodeType":"FunctionDefinition","src":"9170:120:8","nodes":[],"body":{"id":8145,"nodeType":"Block","src":"9238:52:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8141,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8133,"src":"9277:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":8139,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"9265:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9268:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"9265:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":8142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9265:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8138,"name":"underline","nodeType":"Identifier","overloadedDeclarations":[8086,8101,8116,8131,8146],"referencedDeclaration":8086,"src":"9255:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9255:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8137,"id":8144,"nodeType":"Return","src":"9248:35:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"underline","nameLocation":"9179:9:8","parameters":{"id":8134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8133,"mutability":"mutable","name":"self","nameLocation":"9194:4:8","nodeType":"VariableDeclaration","scope":8146,"src":"9189:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8132,"name":"bool","nodeType":"ElementaryTypeName","src":"9189:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9188:11:8"},"returnParameters":{"id":8137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8146,"src":"9223:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8135,"name":"string","nodeType":"ElementaryTypeName","src":"9223:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9222:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8161,"nodeType":"FunctionDefinition","src":"9296:133:8","nodes":[],"body":{"id":8160,"nodeType":"Block","src":"9377:52:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8156,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8148,"src":"9416:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":8154,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"9404:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9407:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"9404:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":8157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9404:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8153,"name":"underline","nodeType":"Identifier","overloadedDeclarations":[8086,8101,8116,8131,8146],"referencedDeclaration":8086,"src":"9394:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9394:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8152,"id":8159,"nodeType":"Return","src":"9387:35:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"underlineBytes","nameLocation":"9305:14:8","parameters":{"id":8149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8148,"mutability":"mutable","name":"self","nameLocation":"9333:4:8","nodeType":"VariableDeclaration","scope":8161,"src":"9320:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8147,"name":"bytes","nodeType":"ElementaryTypeName","src":"9320:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9319:19:8"},"returnParameters":{"id":8152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8161,"src":"9362:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8150,"name":"string","nodeType":"ElementaryTypeName","src":"9362:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9361:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8176,"nodeType":"FunctionDefinition","src":"9435:130:8","nodes":[],"body":{"id":8175,"nodeType":"Block","src":"9513:52:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8171,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8163,"src":"9552:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":8169,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"9540:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9543:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"9540:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":8172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9540:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8168,"name":"underline","nodeType":"Identifier","overloadedDeclarations":[8086,8101,8116,8131,8146],"referencedDeclaration":8086,"src":"9530:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9530:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8167,"id":8174,"nodeType":"Return","src":"9523:35:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"underlineBytes32","nameLocation":"9444:16:8","parameters":{"id":8164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8163,"mutability":"mutable","name":"self","nameLocation":"9469:4:8","nodeType":"VariableDeclaration","scope":8176,"src":"9461:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9461:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9460:14:8"},"returnParameters":{"id":8167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8176,"src":"9498:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8165,"name":"string","nodeType":"ElementaryTypeName","src":"9498:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9497:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8189,"nodeType":"FunctionDefinition","src":"9571:125:8","nodes":[],"body":{"id":8188,"nodeType":"Block","src":"9646:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"id":8184,"name":"INVERSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7123,"src":"9675:7:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":8185,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8178,"src":"9684:4:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8183,"name":"styleConcat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7146,"src":"9663:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":8186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9663:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8182,"id":8187,"nodeType":"Return","src":"9656:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"inverse","nameLocation":"9580:7:8","parameters":{"id":8179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8178,"mutability":"mutable","name":"self","nameLocation":"9602:4:8","nodeType":"VariableDeclaration","scope":8189,"src":"9588:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8177,"name":"string","nodeType":"ElementaryTypeName","src":"9588:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9587:20:8"},"returnParameters":{"id":8182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8189,"src":"9631:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8180,"name":"string","nodeType":"ElementaryTypeName","src":"9631:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9630:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8204,"nodeType":"FunctionDefinition","src":"9702:119:8","nodes":[],"body":{"id":8203,"nodeType":"Block","src":"9771:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8199,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8191,"src":"9808:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8197,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"9796:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9799:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11229,"src":"9796:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure external returns (string memory)"}},"id":8200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9796:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8196,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[8189,8204,8219,8234,8249],"referencedDeclaration":8189,"src":"9788:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9788:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8195,"id":8202,"nodeType":"Return","src":"9781:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"inverse","nameLocation":"9711:7:8","parameters":{"id":8192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8191,"mutability":"mutable","name":"self","nameLocation":"9727:4:8","nodeType":"VariableDeclaration","scope":8204,"src":"9719:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8190,"name":"uint256","nodeType":"ElementaryTypeName","src":"9719:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9718:14:8"},"returnParameters":{"id":8195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8204,"src":"9756:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8193,"name":"string","nodeType":"ElementaryTypeName","src":"9756:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9755:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8219,"nodeType":"FunctionDefinition","src":"9827:118:8","nodes":[],"body":{"id":8218,"nodeType":"Block","src":"9895:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8214,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8206,"src":"9932:4:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":8212,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"9920:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9923:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11237,"src":"9920:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_int256_$returns$_t_string_memory_ptr_$","typeString":"function (int256) pure external returns (string memory)"}},"id":8215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9920:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8211,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[8189,8204,8219,8234,8249],"referencedDeclaration":8189,"src":"9912:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9912:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8210,"id":8217,"nodeType":"Return","src":"9905:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"inverse","nameLocation":"9836:7:8","parameters":{"id":8207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8206,"mutability":"mutable","name":"self","nameLocation":"9851:4:8","nodeType":"VariableDeclaration","scope":8219,"src":"9844:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8205,"name":"int256","nodeType":"ElementaryTypeName","src":"9844:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9843:13:8"},"returnParameters":{"id":8210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8209,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8219,"src":"9880:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8208,"name":"string","nodeType":"ElementaryTypeName","src":"9880:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9879:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8234,"nodeType":"FunctionDefinition","src":"9951:119:8","nodes":[],"body":{"id":8233,"nodeType":"Block","src":"10020:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8229,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8221,"src":"10057:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":8227,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"10045:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10048:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11197,"src":"10045:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure external returns (string memory)"}},"id":8230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10045:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8226,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[8189,8204,8219,8234,8249],"referencedDeclaration":8189,"src":"10037:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10037:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8225,"id":8232,"nodeType":"Return","src":"10030:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"inverse","nameLocation":"9960:7:8","parameters":{"id":8222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8221,"mutability":"mutable","name":"self","nameLocation":"9976:4:8","nodeType":"VariableDeclaration","scope":8234,"src":"9968:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8220,"name":"address","nodeType":"ElementaryTypeName","src":"9968:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9967:14:8"},"returnParameters":{"id":8225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8234,"src":"10005:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8223,"name":"string","nodeType":"ElementaryTypeName","src":"10005:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10004:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8249,"nodeType":"FunctionDefinition","src":"10076:116:8","nodes":[],"body":{"id":8248,"nodeType":"Block","src":"10142:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8244,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8236,"src":"10179:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":8242,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"10167:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10170:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11221,"src":"10167:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bool_$returns$_t_string_memory_ptr_$","typeString":"function (bool) pure external returns (string memory)"}},"id":8245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10167:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8241,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[8189,8204,8219,8234,8249],"referencedDeclaration":8189,"src":"10159:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8240,"id":8247,"nodeType":"Return","src":"10152:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"inverse","nameLocation":"10085:7:8","parameters":{"id":8237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8236,"mutability":"mutable","name":"self","nameLocation":"10098:4:8","nodeType":"VariableDeclaration","scope":8249,"src":"10093:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8235,"name":"bool","nodeType":"ElementaryTypeName","src":"10093:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10092:11:8"},"returnParameters":{"id":8240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8249,"src":"10127:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8238,"name":"string","nodeType":"ElementaryTypeName","src":"10127:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10126:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8264,"nodeType":"FunctionDefinition","src":"10198:129:8","nodes":[],"body":{"id":8263,"nodeType":"Block","src":"10277:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8259,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8251,"src":"10314:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":8257,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"10302:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10305:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11205,"src":"10302:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure external returns (string memory)"}},"id":8260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10302:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8256,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[8189,8204,8219,8234,8249],"referencedDeclaration":8189,"src":"10294:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10294:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8255,"id":8262,"nodeType":"Return","src":"10287:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"inverseBytes","nameLocation":"10207:12:8","parameters":{"id":8252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8251,"mutability":"mutable","name":"self","nameLocation":"10233:4:8","nodeType":"VariableDeclaration","scope":8264,"src":"10220:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8250,"name":"bytes","nodeType":"ElementaryTypeName","src":"10220:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10219:19:8"},"returnParameters":{"id":8255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8264,"src":"10262:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8253,"name":"string","nodeType":"ElementaryTypeName","src":"10262:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10261:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":8279,"nodeType":"FunctionDefinition","src":"10333:126:8","nodes":[],"body":{"id":8278,"nodeType":"Block","src":"10409:50:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":8274,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8266,"src":"10446:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":8272,"name":"vm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7090,"src":"10434:2:8","typeDescriptions":{"typeIdentifier":"t_contract$_VmSafe_$13052","typeString":"contract VmSafe"}},"id":8273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10437:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":11213,"src":"10434:11:8","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes32_$returns$_t_string_memory_ptr_$","typeString":"function (bytes32) pure external returns (string memory)"}},"id":8275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10434:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":8271,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[8189,8204,8219,8234,8249],"referencedDeclaration":8189,"src":"10426:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory) pure returns (string memory)"}},"id":8276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10426:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8270,"id":8277,"nodeType":"Return","src":"10419:33:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"inverseBytes32","nameLocation":"10342:14:8","parameters":{"id":8267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8266,"mutability":"mutable","name":"self","nameLocation":"10365:4:8","nodeType":"VariableDeclaration","scope":8279,"src":"10357:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8265,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10357:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10356:14:8"},"returnParameters":{"id":8270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8279,"src":"10394:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8268,"name":"string","nodeType":"ElementaryTypeName","src":"10394:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10393:15:8"},"scope":8280,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"StdStyle","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"linearizedBaseContracts":[8280],"name":"StdStyle","nameLocation":"108:8:8","scope":8281,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":8}